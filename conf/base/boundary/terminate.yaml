# @package boundary
#
# Hydra configuration for TerminateBoundary policy implementation
# 
# This configuration defines the boundary policy that terminates episodes when agents
# violate domain boundaries by moving outside the valid navigation region. The policy
# implements the traditional "out of bounds" termination strategy for controlled
# episode management in navigation experiments.
#
# Key Features:
# - Episode termination on boundary violation with configurable status
# - Zero-cost violation handling with no position modification
# - Vectorized violation detection for multi-agent scenarios  
# - Runtime parameter override via environment variables
# - Integration with plume_nav_sim v1.0 boundary policy framework
#
# Performance Characteristics:
# - check_violations(): <0.1ms for 100 agents with vectorized operations
# - apply_policy(): <0.01ms no-op operation regardless of agent count
# - Memory usage: <1KB for policy state management
#
# Usage Examples:
#   Basic termination boundary for navigation experiments:
#   boundary:
#     _target_: plume_nav_sim.core.boundaries.TerminateBoundary
#     domain_bounds: [100, 100]
#     status_on_violation: "oob"
#
#   Runtime parameter override via environment variables:
#   export BOUNDARY_TERMINATE_STATUS="boundary_exit"
#   export BOUNDARY_DOMAIN_BOUNDS="[200,150]"
#
# Integration Points:
# - PlumeNavigationEnv: Episode termination management via get_termination_status()
# - SingleAgentController: Boundary violation detection and episode status updates
# - MultiAgentController: Vectorized violation checking across agent populations
# - Statistics Aggregator: Termination reason tracking for research metrics

# Hydra target specification for TerminateBoundary class instantiation
_target_: plume_nav_sim.core.boundaries.TerminateBoundary

# Domain boundary configuration defining valid navigation region
# Format: [width, height] tuple specifying rectangular domain size
# Default: [100, 100] provides standard experimental domain
# Environment Override: BOUNDARY_DOMAIN_BOUNDS="[width,height]"
domain_bounds: 
  - 100.0  # Domain width (x-axis extent)
  - 100.0  # Domain height (y-axis extent)

# Coordinate system configuration
# When false (default): Agent positions restricted to non-negative coordinates [0, domain_bounds]
# When true: Allows negative coordinates with infinite lower bounds
# Environment Override: BOUNDARY_ALLOW_NEGATIVE_COORDS="true|false"
allow_negative_coords: false

# Episode termination status returned when boundary violations occur
# Standard value: "oob" (out of bounds) for compatibility with existing analysis
# Alternative values: "boundary_exit", "domain_violation", custom status strings
# Environment Override: BOUNDARY_TERMINATE_STATUS="custom_status"
status_on_violation: "oob"

# Configuration validation and deployment examples
defaults:
  - override /hydra/job_logging: colorlog
  - override /hydra/hydra_logging: colorlog

# Runtime parameter overrides via environment variables
# Supports dynamic configuration without code changes for deployment flexibility
# Environment variable parsing follows Hydra's standard override syntax
hydra:
  job:
    override_dirname: terminate_boundary
  runtime:
    cwd: ${oc.env:PWD}
  
# Environment variable configuration mapping
# Enables runtime parameter adjustment for different experimental conditions
boundary_terminate_status: ${oc.env:BOUNDARY_TERMINATE_STATUS,${status_on_violation}}
boundary_domain_bounds: ${oc.env:BOUNDARY_DOMAIN_BOUNDS,${domain_bounds}}
boundary_allow_negative: ${oc.env:BOUNDARY_ALLOW_NEGATIVE_COORDS,${allow_negative_coords}}

# Validation constraints for parameter ranges
# Ensures configuration integrity and prevents invalid parameter combinations
_validate_:
  domain_bounds:
    _type_: list
    _length_: 2
    _element_constraints_:
      - _type_: float
        _min_: 0.001  # Minimum domain size to prevent degenerate cases
        _max_: 10000.0  # Maximum domain size for memory efficiency
  status_on_violation:
    _type_: str
    _min_length_: 1
    _max_length_: 50
    _pattern_: "^[a-zA-Z][a-zA-Z0-9_]*$"  # Valid Python identifier pattern
  allow_negative_coords:
    _type_: bool

# Documentation and usage examples for research teams
_documentation_:
  purpose: "Boundary policy for episode termination on domain violations"
  use_cases:
    - "Navigation experiments requiring strict spatial constraints"
    - "Exploration behavior analysis with controlled termination"
    - "Comparative studies of boundary handling strategies"
  
  parameter_guide:
    domain_bounds: "Rectangular domain size [width, height] in simulation units"
    status_on_violation: "String identifier for termination reason tracking"
    allow_negative_coords: "Coordinate system configuration for domain bounds"
  
  performance_notes:
    - "Zero computational overhead when no violations occur"
    - "Vectorized violation detection scales to 100+ agents"
    - "Minimal memory footprint (<1KB) regardless of domain size"
  
  integration_examples:
    basic_usage: |
      # Standard termination boundary configuration
      boundary:
        _target_: plume_nav_sim.core.boundaries.TerminateBoundary
        domain_bounds: [100, 100]
        status_on_violation: "oob"
    
    custom_domain: |
      # Large domain with custom termination status
      boundary:
        _target_: plume_nav_sim.core.boundaries.TerminateBoundary
        domain_bounds: [500, 300]
        status_on_violation: "boundary_exit"
        allow_negative_coords: false
    
    environment_override: |
      # Runtime configuration via environment variables
      export BOUNDARY_TERMINATE_STATUS="domain_violation"
      export BOUNDARY_DOMAIN_BOUNDS="[200,150]"
      # Configuration automatically uses overridden values

# Migration support for v0.3.0 compatibility
# Maintains backward compatibility during transition period
_legacy_mapping_:
  old_parameter_names:
    bounds: domain_bounds  # v0.3.0 parameter name mapping
    terminate_status: status_on_violation  # Legacy status parameter
    negative_coords: allow_negative_coords  # Coordinate system setting
  
  deprecated_values:
    status_on_violation:
      "out_of_bounds": "oob"  # Standardized status value
      "boundary": "oob"       # Normalized status string