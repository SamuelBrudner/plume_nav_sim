# ============================================================================
# PLUME NAVIGATION SIMULATION V1.0: USER CONFIGURATION (config.yaml)
# ============================================================================
#
# This file serves as the primary user configuration template demonstrating
# Hydra's hierarchical composition patterns, environment variable interpolation,
# and the new v1.0 component-based architecture. It inherits from conf/base.yaml
# while providing comprehensive examples of the modular, extensible system.
#
# V1.0 ARCHITECTURAL OVERVIEW:
# The v1.0 release transforms plume_nav_sim from a project-specific implementation
# into a general-purpose, extensible simulation toolkit through protocol-based
# component abstractions, configuration-driven extensibility, and zero-code
# customization capabilities.
#
# Configuration Hierarchy and Composition:
#   1. conf/base.yaml (inherited defaults) - System foundation parameters
#   2. conf/config.yaml (THIS FILE) - User-driven customizations and overrides  
#   3. conf/local/*.yaml (runtime overrides) - Environment-specific secrets
#   4. CLI parameter overrides - Dynamic runtime modifications
#
# V1.0 NEW FEATURES DEMONSTRATED:
#   - Protocol-based component abstractions (Source, Boundary, Action, Record, Hooks)
#   - Configuration-driven component selection and parameter sweeps
#   - Zero-code extensibility through extension hooks
#   - Comprehensive data recording and statistics aggregation
#   - Enhanced debugging and visualization tools
#   - Performance-aware design with ≤33ms step latency
#
# V0.3.0 → V1.0 MIGRATION PATTERNS:
#   - Legacy configurations remain fully compatible
#   - New components are opt-in and configurable
#   - Environment variable integration expanded for all components
#   - Multi-run capabilities enhanced for component composition studies
#
# Usage Examples:
#   Basic execution (backward compatible):
#     python -m plume_nav_sim.cli.main
#
#   V1.0 component configuration examples:
#     python -m plume_nav_sim.cli.main source=point_source boundary=terminate
#     python -m plume_nav_sim.cli.main agent_init=grid action=continuous_2d
#     python -m plume_nav_sim.cli.main record=parquet hooks=episode_stats
#
#   Parameter override examples:
#     python -m plume_nav_sim.cli.main navigator.max_speed=2.0
#     python -m plume_nav_sim.cli.main source.position=[25.0,25.0] boundary.terminate_on_exit=true
#
#   Multi-run execution for component sweeps:
#     python -m plume_nav_sim.cli.main --multirun source=point_source,multi_source
#     python -m plume_nav_sim.cli.main --multirun boundary=terminate,bounce,wrap
#     python -m plume_nav_sim.cli.main --multirun record.backend=parquet,hdf5,sqlite
#
#   Configuration group selection:
#     python -m plume_nav_sim.cli.main +source=dynamic_source
#     python -m plume_nav_sim.cli.main +record=full_trajectory
#
# Environment Variables:
#   This configuration demonstrates secure environment variable integration
#   through ${oc.env:VAR_NAME,default} syntax. V1.0 adds extensive component
#   selection variables for deployment flexibility.
#
# ============================================================================

# Hydra defaults configuration enabling hierarchical composition and
# configuration group management for sophisticated experiment orchestration
defaults:
  # Inherit foundational parameters from base configuration
  - base
  
  # Frame caching configuration group for high-performance frame storage
  # LRU cache mode provides intelligent eviction with memory management
  # Compatible with environment flavors: memoryless, memory
  - override frame_cache: lru
  
  # ======================================================================
  # V1.0 COMPONENT-BASED ARCHITECTURE: Protocol-Driven Abstractions
  # ======================================================================
  # NEW: Pluggable component configuration groups enabling zero-code
  # extensibility and configuration-driven research scenarios
  
  # Odor source abstraction for flexible source modeling
  # Configure source position, strength, and detection algorithms
  - source: ${oc.env:SOURCE_TYPE,"point_source"}  # Options: point_source, multi_source, dynamic_source
  
  # Agent initialization strategy for diverse experiment setups
  # Control starting positions, orientations, and formation patterns
  - agent_init: ${oc.env:AGENT_INIT_TYPE,"uniform_random"}  # Options: uniform_random, grid, fixed_list, from_dataset
  
  # Boundary handling policy for domain edge behavior
  # Define agent response when reaching simulation boundaries
  - boundary: ${oc.env:BOUNDARY_TYPE,"terminate"}  # Options: terminate, bounce, wrap, clip
  
  # Action interface abstraction for unified RL framework integration
  # Standardize action processing across different control schemes
  - action: ${oc.env:ACTION_TYPE,"continuous_2d"}  # Options: continuous_2d, cardinal_discrete
  
  # Data recording system for comprehensive experiment tracking
  # Configure data persistence, formats, and performance optimization
  - record: ${oc.env:RECORD_BACKEND,"parquet"}  # Options: parquet, hdf5, sqlite, none
  
  # Extension hook system for downstream project integration
  # Enable custom callbacks and observation/reward extensions
  - hooks: ${oc.env:HOOKS_CONFIG,"basic"}  # Options: basic, episode_stats, custom
  
  # ======================================================================
  # V0.3.0 LEGACY COMPONENTS (Maintained for Backward Compatibility)
  # ======================================================================
  
  # Plume model selection for different simulation fidelity levels
  # Switch between fast analytical models and realistic turbulent physics
  - plume_models: ${oc.env:PLUME_MODEL_TYPE,"gaussian"}  # Options: gaussian, turbulent, video_adapter
  
  # Wind field dynamics configuration for environmental realism
  # Control atmospheric conditions affecting plume transport
  - wind_fields: ${oc.env:WIND_FIELD_TYPE,"constant"}  # Options: constant, turbulent, time_varying
  
  # Sensor configuration for flexible perception modeling
  # Support different sensing modalities for navigation research
  - sensors: ${oc.env:SENSOR_TYPE,"concentration"}  # Options: binary, concentration, gradient
  
  # ======================================================================
  # CONFIGURATION GROUP OVERRIDE EXAMPLES
  # ======================================================================
  # Optional configuration group overrides (prefix with + to add, - to remove)
  # Uncomment and modify as needed for specific use cases
  
  # V1.0 Component Override Examples:
  # - override source: multi_source         # Multiple odor sources
  # - override agent_init: grid             # Grid-based starting positions
  # - override boundary: bounce             # Elastic boundary collisions
  # - override action: cardinal_discrete    # Discrete cardinal direction actions
  # - override record: hdf5                 # HDF5 data storage backend
  # - override hooks: episode_stats         # Enhanced episode statistics
  
  # V0.3.0 Legacy Override Examples:
  # - override navigator: multi_agent       # Switch to multi-agent navigation
  # - override video_plume: high_resolution # Use high-resolution processing
  # - override visualization: publication   # Publication-quality plots
  # - override environment: development     # Development environment settings
  
  # Component Combination Examples:
  # - override source: dynamic_source       # Time-varying source positions
  # - override plume_models: turbulent      # Switch to realistic turbulent physics
  # - override wind_fields: turbulent       # Enable gusty, time-varying wind
  # - override sensors: gradient            # Use gradient-based navigation cues
  
  # Multi-component configuration examples (use + prefix to add multiple)
  # - +hooks: custom_reward                 # Add custom reward computation
  # - +record: trajectory_export            # Add trajectory export capability
  # - +sensors: binary                      # Add binary detection to existing sensors
  # - +sensors: gradient                    # Add gradient computation for multi-modal perception
  
  # Alternative configurations for performance scenarios
  # - override frame_cache: preload_all     # Full preload mode for maximum performance
  # - override record: none                 # Disable recording for speed optimization
  # - override hooks: minimal               # Minimal hooks for performance testing
  
  # Enable this configuration file as the primary override source
  - _self_

# ============================================================================
# ENVIRONMENT AND DEPLOYMENT CONFIGURATION OVERRIDES
# ============================================================================
# Customize system behavior for different deployment scenarios with
# environment variable integration for secure credential management.

environment:
  # Environment type override with secure default fallback
  # Set ENVIRONMENT_TYPE=production for production deployments
  type: ${oc.env:ENVIRONMENT_TYPE,"development"}  # Options: development, testing, production
  
  # Debug mode control through environment variables
  # Set DEBUG=true for enhanced debugging during development
  debug_mode: ${oc.env:DEBUG,"true"}  # Enable debug features and verbose logging
  
  # Verbose output control for detailed execution tracking
  # Set VERBOSE=false for quieter production operation
  verbose_output: ${oc.env:VERBOSE,"true"}  # Show detailed operation progress
  
  # Platform-specific configuration with automatic detection
  # Override with PLATFORM=linux|windows|macos for specific deployments
  platform: ${oc.env:PLATFORM,"auto"}  # Target platform optimization
  
  # Performance and resource configuration overrides
  paths:
    # Data directory with flexible environment variable support
    # Set DATA_DIR=/path/to/data for custom data locations
    data_dir: ${oc.env:DATA_DIR,"data"}
    
    # Output directory for simulation results and visualizations  
    # Set OUTPUT_DIR=/path/to/outputs for custom output locations
    output_dir: ${oc.env:OUTPUT_DIR,"outputs"}
    
    # Video directory with environment variable override capability
    # Set VIDEO_DIR=/path/to/videos for custom video storage
    video_dir: ${oc.env:VIDEO_DIR,"data/videos"}

# ============================================================================
# FRAME CACHE CONFIGURATION OVERRIDES
# ============================================================================
# High-performance frame caching system for accelerated reinforcement learning
# training workflows with sub-10ms frame retrieval targets and intelligent
# memory management supporting LRU eviction and full-preload strategies.
#
# Environment Flavor Compatibility:
#   - memoryless.yaml: Uses mode="none" for minimal memory footprint
#   - memory.yaml: Uses mode="lru" or mode="all" for optimized caching
#   - Custom flavors: Full configurability via environment variables
#
# Gymnasium Migration Enhancement:
#   - Compatible with new 5-tuple step returns
#   - Supports enhanced performance requirements (mean step() < 10ms)
#   - Memory limit enforcement per Section 0.3.1 (≤ 2 GiB RAM cap)

frame_cache:
  # Cache operation mode with environment variable override capability
  # Set FRAME_CACHE_MODE=lru|all|none for deployment-specific cache behavior
  # Options: "none" (disabled), "lru" (intelligent caching), "all" (full preload)
  mode: ${oc.env:FRAME_CACHE_MODE,"lru"}  # Cache strategy selection
  
  # Memory management configuration with runtime override support
  # Set FRAME_CACHE_SIZE_MB=4096 for custom memory limits in production
  memory_limit_mb: ${oc.env:FRAME_CACHE_SIZE_MB,"2048"}  # Default 2 GiB memory limit
  
  # Enable high-performance statistics collection for all cache modes
  # Required for gymnasium compliance and performance monitoring
  enable_statistics: true  # Collect cache hit/miss statistics per Section 0.3.3
  
  # Memoryless cache configuration for minimal memory usage (memoryless flavor)
  none:
    # Disable all caching for memory-constrained environments
    bypass_cache: true  # Skip cache entirely for true memoryless operation
    direct_frame_access: true  # Direct video frame access without buffering
    minimal_metadata: true  # Reduce metadata overhead for minimal memory
  
  # LRU cache behavior overrides for memory-efficient frame storage
  lru:
    # Maximum number of frames to cache before eviction starts
    # Automatically calculated from memory_limit_mb and frame size if null
    max_frames: null  # Auto-calculate based on memory limit
    
    # Cache preloading strategy for sequential access optimization
    preload_sequential: true  # Preload next frames for sequential access
    preload_count: 10  # Number of sequential frames to preload ahead
    
    # Eviction policy configuration for memory pressure management
    eviction_batch_size: 5  # Number of frames to evict when memory threshold reached
    memory_pressure_threshold: 0.9  # Memory usage threshold triggering eviction (0.0-1.0)
  
  # Full preload cache configuration for maximum performance scenarios
  preload_all:
    # Enable warming cache during environment initialization
    warm_on_reset: true  # Preload all frames during environment reset
    
    # Memory protection settings for large video files
    max_video_size_mb: 8192  # Maximum video size for full preload (8 GiB)
    memory_check_enabled: true  # Verify available system memory before preload
    fallback_to_lru: true  # Fall back to LRU mode if memory insufficient
  
  # Cache performance monitoring and optimization settings
  monitoring:
    # Performance threshold monitoring for cache effectiveness
    target_hit_rate: 0.90  # Target cache hit rate for performance validation
    
    # Statistics collection and reporting configuration
    collect_statistics: true  # Enable cache hit/miss statistics collection
    statistics_window: 1000  # Rolling window size for hit rate calculation
    log_performance_warnings: true  # Log warnings when hit rate falls below target
    
    # Memory usage monitoring for optimization guidance
    memory_monitoring_enabled: true  # Enable memory usage tracking via psutil
    memory_warning_threshold: 0.85  # Warning threshold for memory usage (0.0-1.0)

# ============================================================================
# NAVIGATOR CONFIGURATION OVERRIDES
# ============================================================================
# Demonstrate selective parameter customization while inheriting base defaults.
# These examples show common research scenario configurations.

navigator:
  # Single-agent configuration overrides (basic research scenarios)
  # Override starting orientation - useful for systematic directional studies
  orientation: 90.0  # Start facing up instead of default (0.0 = right)
  
  # Override initial speed for non-stationary start conditions
  # Enables studies of navigation from moving initial conditions
  speed: 0.5  # Start with moderate speed instead of default (0.0)
  
  # Environment variable override for maximum speed parameter
  # Set NAVIGATOR_MAX_SPEED=2.5 for custom speed limits in experiments
  max_speed: ${oc.env:NAVIGATOR_MAX_SPEED,"1.5"}  # Increased from base default (1.0)
  
  # Advanced control parameter overrides for sophisticated navigation studies
  control:
    # Acceleration override for dynamic response studies
    acceleration: 0.15  # Increased responsiveness from base default (0.1)
    
    # Turning rate override for agility experiments
    turning_rate: 45.0  # Increased maneuverability from base default (30.0)
    
    # Sensor configuration overrides for perception studies
    sensor_range: 15.0  # Extended sensing from base default (10.0)
    sensor_noise: 0.05  # Added realistic sensor noise (base default: 0.0)
  
  # Multi-agent configuration examples (uncomment to activate)
  # These parameters override single-agent settings when positions is specified
  # positions: [[0.0, 0.0], [5.0, 0.0], [10.0, 0.0]]  # Three-agent formation
  # orientations: [0.0, 120.0, 240.0]  # Distributed orientations
  # speeds: [0.5, 0.7, 0.5]  # Varied initial speeds
  # num_agents: 3  # Multi-agent mode activation
  
  # Formation control overrides for swarm behavior studies
  formation:
    # Formation type override for systematic swarm studies
    type: "line"  # Override from base default ("grid") for linear formations
    spacing: 7.0  # Increased spacing from base default (5.0)
    maintain_formation: true  # Enable formation maintenance (base default: false)

# ============================================================================
# VIDEO PLUME CONFIGURATION OVERRIDES  
# ============================================================================
# Customize video processing parameters for specific research requirements
# with environment variable integration for deployment flexibility.

video_plume:
  # Video source with environment variable override
  # Set VIDEO_PATH=/path/to/video.mp4 for custom video sources
  video_path: ${oc.env:VIDEO_PATH,"data/videos/example_plume.mp4"}
  
  # Preprocessing overrides for specific video characteristics
  flip: true  # Override base default (false) - useful for mirrored camera setups
  
  # Gaussian smoothing overrides for noise reduction
  kernel_size: 5  # Enable smoothing (base default: 0 = disabled)
  kernel_sigma: 1.5  # Custom smoothing strength (base default: 1.0)
  
  # Threshold override for binary plume detection
  # Set PLUME_THRESHOLD=0.3 for environment-specific threshold values
  threshold: ${oc.env:PLUME_THRESHOLD,"0.4"}  # Binary detection threshold
  
  # Advanced preprocessing overrides for challenging video conditions
  preprocessing:
    # Contrast enhancement for low-contrast videos
    enhance_contrast: true  # Enable enhancement (base default: false)
    contrast_alpha: 1.2  # Increased contrast from base default (1.0)
    brightness_beta: 10.0  # Brightness adjustment from base default (0.0)
    
    # Noise reduction overrides for noisy video sources
    median_filter_size: 3  # Enable median filtering (base default: 0)
    bilateral_filter: true  # Enable edge-preserving filtering (base default: false)
  
  # Sampling configuration overrides for temporal analysis
  sampling:
    # Frame range override for focused analysis
    start_frame: 50  # Skip initial frames (base default: 0)
    end_frame: 1000  # Limit analysis range (base default: null = all frames)
    frame_skip: 2  # Process every 2nd frame for faster analysis (base default: 1)
    
    # Region of interest configuration for spatially focused studies
    roi_enabled: true  # Enable ROI processing (base default: false)
    roi_x: 100  # ROI top-left x coordinate (base default: 0)
    roi_y: 50   # ROI top-left y coordinate (base default: 0)
    roi_width: 300  # ROI width override (base default: null = full width)
    roi_height: 200  # ROI height override (base default: null = full height)

# ============================================================================
# V1.0 COMPONENT-BASED ARCHITECTURE CONFIGURATION
# ============================================================================
# Configure the new protocol-driven component abstractions enabling
# zero-code extensibility and configuration-driven research workflows.

# ============================================================================
# SOURCE ABSTRACTION CONFIGURATION
# ============================================================================
# Configure odor source modeling through pluggable source implementations
# supporting point sources, multiple sources, and dynamic source movements.

source:
  # Source type selection with environment variable override
  # Set SOURCE_TYPE=point_source|multi_source|dynamic_source for different scenarios
  type: ${oc.env:SOURCE_TYPE,"point_source"}  # Source implementation selection
  
  # Point source configuration (single stationary odor release point)
  point_source:
    # Source location in simulation coordinates
    position: ${oc.env:SOURCE_POSITION,"[50.0, 50.0]"}  # [x, y] coordinates
    strength: ${oc.env:SOURCE_STRENGTH,"1000.0"}  # Odor release rate
    radius: 2.0  # Detection radius around source location
    
    # Source characteristics for realistic modeling
    activation_time: 0.0  # Time when source becomes active (seconds)
    deactivation_time: null  # Time when source deactivates (null = always active)
    intermittency: false  # Enable intermittent source release
    intermittency_frequency: 0.1  # Frequency of on/off cycles (Hz)
    
  # Multi-source configuration (multiple simultaneous odor sources)
  multi_source:
    # Source positions and strengths
    positions: [[25.0, 25.0], [75.0, 25.0], [50.0, 75.0]]  # Multiple [x, y] locations
    strengths: [800.0, 1200.0, 1000.0]  # Individual source strengths
    radii: [2.0, 2.5, 2.0]  # Detection radii for each source
    
    # Source interaction modeling
    additive_effects: true  # Sources combine additively in overlapping regions
    interference_threshold: 10.0  # Minimum distance for independent sources
    
    # Temporal coordination
    synchronized_activation: false  # All sources activate simultaneously
    staggered_delay: 5.0  # Delay between source activations (seconds)
    
  # Dynamic source configuration (time-varying source positions)
  dynamic_source:
    # Initial source configuration
    initial_position: [30.0, 30.0]  # Starting location
    initial_strength: 1000.0  # Initial release rate
    
    # Movement pattern configuration
    movement_type: ${oc.env:SOURCE_MOVEMENT,"circular"}  # Options: linear, circular, random_walk, scripted
    movement_speed: 2.0  # Movement velocity (spatial units/second)
    movement_radius: 15.0  # Radius for circular movement
    movement_bounds: [[10.0, 10.0], [90.0, 90.0]]  # Movement boundary box
    
    # Scripted movement (advanced scenarios)
    movement_script: null  # Path to YAML file with position schedule
    enable_prediction: false  # Enable source position prediction by agents

# ============================================================================
# AGENT INITIALIZATION CONFIGURATION
# ============================================================================
# Configure agent starting positions and orientations through pluggable
# initialization strategies supporting diverse experimental designs.

agent_init:
  # Initialization strategy selection with environment variable override
  # Set AGENT_INIT_TYPE=uniform_random|grid|fixed_list|from_dataset
  type: ${oc.env:AGENT_INIT_TYPE,"uniform_random"}  # Initializer implementation
  
  # Uniform random initialization (default for single agents)
  uniform_random:
    # Spatial bounds for random position generation
    bounds: [[5.0, 5.0], [95.0, 95.0]]  # [[x_min, y_min], [x_max, y_max]]
    min_distance_from_source: ${oc.env:MIN_SOURCE_DISTANCE,"20.0"}  # Minimum distance from any source
    min_inter_agent_distance: 5.0  # Minimum distance between agents (multi-agent)
    
    # Orientation configuration
    random_orientation: true  # Random starting orientations
    orientation_range: [0.0, 360.0]  # [min, max] orientation degrees
    
    # Speed initialization
    random_speed: false  # Start agents with random speeds
    speed_range: [0.0, 0.5]  # [min, max] initial speed range
    
  # Grid initialization (systematic position layouts)
  grid:
    # Grid configuration
    grid_shape: ${oc.env:GRID_SHAPE,"[3, 3]"}  # [rows, cols] grid dimensions
    spacing: ${oc.env:GRID_SPACING,"10.0"}  # Distance between grid points
    center_position: [50.0, 50.0]  # Grid center location
    
    # Grid orientation and alignment
    grid_orientation: 0.0  # Rotation of entire grid (degrees)
    agent_orientations: "toward_center"  # Options: random, uniform, toward_center, away_from_center
    
    # Jitter for non-perfect positioning
    position_jitter: 0.0  # Random position offset magnitude
    orientation_jitter: 0.0  # Random orientation offset (degrees)
    
  # Fixed list initialization (predetermined positions)
  fixed_list:
    # Explicit position specifications
    positions: [[10.0, 10.0], [20.0, 15.0], [15.0, 25.0]]  # Exact [x, y] positions
    orientations: [45.0, 90.0, 180.0]  # Corresponding orientations (degrees)
    speeds: [0.0, 0.2, 0.1]  # Initial speeds for each agent
    
    # Validation and error handling
    validate_bounds: true  # Ensure positions are within simulation domain
    allow_source_overlap: false  # Prevent agents starting on source locations
    
  # Dataset initialization (load from experimental data)
  from_dataset:
    # Dataset configuration
    dataset_path: ${oc.env:INIT_DATASET_PATH,"data/agent_starts.csv"}  # Path to position data
    dataset_format: "csv"  # Options: csv, json, hdf5, parquet
    position_columns: ["x", "y"]  # Column names for position data
    orientation_column: "orientation"  # Column name for orientation data
    
    # Sampling configuration
    random_sampling: true  # Randomly sample from dataset
    sample_size: null  # Number of positions to sample (null = use all)
    replacement: false  # Sample with replacement
    
    # Data preprocessing
    coordinate_transform: null  # Transformation matrix for coordinate systems
    position_scaling: 1.0  # Scaling factor for position coordinates

# ============================================================================
# BOUNDARY POLICY CONFIGURATION
# ============================================================================
# Configure agent behavior at simulation domain boundaries through
# pluggable policy implementations supporting various edge handling strategies.

boundary:
  # Boundary policy selection with environment variable override
  # Set BOUNDARY_TYPE=terminate|bounce|wrap|clip for different behaviors
  type: ${oc.env:BOUNDARY_TYPE,"terminate"}  # Boundary policy implementation
  
  # Domain boundary specification
  bounds: [[0.0, 0.0], [100.0, 100.0]]  # [[x_min, y_min], [x_max, y_max]]
  margin: 1.0  # Safety margin from boundary edge
  
  # Terminate policy (end episode when boundary reached)
  terminate:
    # Termination behavior
    status_on_violation: "boundary_exit"  # Episode termination status
    immediate_termination: true  # Terminate immediately vs next step
    final_reward: ${oc.env:BOUNDARY_REWARD,"-10.0"}  # Reward for boundary violation
    
    # Logging and tracking
    log_boundary_events: true  # Log boundary violation events
    track_exit_locations: true  # Record where agents exited domain
    
  # Bounce policy (elastic collision with boundaries)
  bounce:
    # Collision dynamics
    restitution_coefficient: ${oc.env:BOUNCE_RESTITUTION,"0.8"}  # Energy retention after bounce
    velocity_damping: 0.1  # Velocity reduction on collision
    angular_damping: 0.05  # Angular velocity damping
    
    # Bounce behavior configuration
    perfect_reflection: false  # Enable perfect elastic reflection
    noise_on_bounce: 0.02  # Random noise added to bounce direction
    minimum_bounce_velocity: 0.1  # Minimum velocity after bounce
    
  # Wrap policy (teleport to opposite boundary)
  wrap:
    # Wrapping behavior
    maintain_velocity: true  # Preserve velocity across boundary wrap
    maintain_orientation: true  # Preserve orientation across wrap
    
    # Wrap transition smoothing
    transition_time: 0.1  # Time for smooth position transition
    fade_effect: false  # Visual fade during wrapping
    
    # Boundary crossing penalties
    wrap_penalty: ${oc.env:WRAP_PENALTY,"-1.0"}  # Reward penalty for wrapping
    
  # Clip policy (constrain agent to remain within bounds)
  clip:
    # Clipping behavior
    soft_clipping: true  # Gradual velocity reduction near boundary
    clipping_margin: 2.0  # Distance from boundary where clipping begins
    
    # Force application
    repulsion_strength: 10.0  # Strength of boundary repulsion force
    velocity_dampening: 0.5  # Velocity reduction when clipped
    
    # Collision handling
    allow_sliding: true  # Allow movement parallel to boundary
    friction_coefficient: 0.1  # Friction when sliding along boundary

# ============================================================================
# ACTION INTERFACE CONFIGURATION
# ============================================================================
# Configure action space abstraction for unified RL framework integration
# supporting different control schemes and action representations.

action:
  # Action interface selection with environment variable override
  # Set ACTION_TYPE=continuous_2d|cardinal_discrete for different control schemes
  type: ${oc.env:ACTION_TYPE,"continuous_2d"}  # Action interface implementation
  
  # Continuous 2D action space (standard for most RL algorithms)
  continuous_2d:
    # Action space configuration
    action_bounds: [[-1.0, -1.0], [1.0, 1.0]]  # [[min_x, min_y], [max_x, max_y]]
    action_scaling: "linear"  # Options: linear, quadratic, sigmoid
    
    # Action interpretation
    coordinate_system: "local"  # Options: local (agent-relative), global (world-relative)
    velocity_control: true  # Actions control velocity vs acceleration
    
    # Action smoothing and filtering
    temporal_smoothing: false  # Apply temporal filtering to actions
    smoothing_window: 3  # Number of steps for action smoothing
    noise_injection: 0.0  # Gaussian noise added to actions
    
    # Action constraints
    max_acceleration: ${oc.env:MAX_ACCELERATION,"5.0"}  # Maximum action magnitude
    min_action_threshold: 0.01  # Minimum meaningful action magnitude
    
  # Cardinal discrete action space (4 or 8 directional movement)
  cardinal_discrete:
    # Discrete action configuration
    num_actions: ${oc.env:NUM_ACTIONS,"8"}  # Options: 4 (NSEW), 8 (includes diagonals), 9 (includes stop)
    include_stop_action: true  # Include no-movement action
    
    # Action magnitude configuration
    fixed_action_magnitude: ${oc.env:ACTION_MAGNITUDE,"1.0"}  # Fixed action strength
    variable_magnitude: false  # Allow variable action magnitudes
    magnitude_levels: [0.5, 1.0, 1.5]  # Discrete magnitude options
    
    # Direction mapping
    action_directions: null  # Custom direction mapping (null = default cardinal/diagonal)
    angle_offset: 0.0  # Angular offset for action directions (degrees)
    
    # Action representation
    one_hot_encoding: false  # Use one-hot vs integer action representation
    action_masks: false  # Enable invalid action masking

# ============================================================================
# DATA RECORDING SYSTEM CONFIGURATION
# ============================================================================
# Configure comprehensive data persistence through pluggable recording
# backends supporting different storage formats and performance requirements.

record:
  # Recording backend selection with environment variable override
  # Set RECORD_BACKEND=parquet|hdf5|sqlite|none for different storage strategies
  backend: ${oc.env:RECORD_BACKEND,"parquet"}  # Recording backend implementation
  
  # Recording scope and frequency
  enabled: ${oc.env:RECORD_ENABLED,"true"}  # Master recording enable/disable
  full_trajectory: ${oc.env:RECORD_FULL,"true"}  # Record per-step trajectories
  episode_summaries: true  # Record episode-level statistics
  recording_frequency: ${oc.env:RECORD_FREQ,"1"}  # Record every N steps
  
  # Data selection configuration
  record_observations: true  # Include observation data
  record_actions: true  # Include action data
  record_rewards: true  # Include reward values
  record_metadata: true  # Include episode metadata
  record_internal_state: false  # Include agent internal state (if available)
  
  # Performance optimization
  buffer_size: ${oc.env:RECORD_BUFFER_SIZE,"1000"}  # Buffer size for batch writes
  compression_enabled: true  # Enable data compression
  async_writing: true  # Use asynchronous I/O for performance
  
  # Parquet backend configuration (high-performance columnar storage)
  parquet:
    # File organization
    output_directory: ${oc.env:PARQUET_DIR,"outputs/data/parquet"}  # Output directory
    partition_by_episode: true  # Create separate files per episode
    partition_by_date: false  # Organize files by date
    
    # Compression and encoding
    compression_algorithm: "snappy"  # Options: snappy, gzip, lz4, zstd
    encoding: "utf8"  # String encoding method
    
    # Performance tuning
    row_group_size: 10000  # Rows per row group for optimal I/O
    write_batch_size: 1000  # Batch size for write operations
    
  # HDF5 backend configuration (scientific data format)
  hdf5:
    # File organization
    output_directory: ${oc.env:HDF5_DIR,"outputs/data/hdf5"}  # Output directory
    single_file_mode: true  # Store all data in single HDF5 file vs per-episode
    
    # Compression settings
    compression: "gzip"  # Options: gzip, lzf, szip
    compression_level: 6  # Compression level (1-9)
    shuffle: true  # Enable shuffle filter for better compression
    
    # Dataset organization
    chunking_enabled: true  # Enable chunked storage for large datasets
    chunk_size: 1000  # Chunk size for optimal access patterns
    
  # SQLite backend configuration (relational database)
  sqlite:
    # Database configuration
    database_path: ${oc.env:SQLITE_PATH,"outputs/data/experiments.db"}  # Database file path
    table_prefix: "exp_"  # Prefix for table names
    
    # Performance optimization
    batch_insert_size: 500  # Batch size for insert operations
    enable_wal_mode: true  # Enable Write-Ahead Logging for performance
    synchronous_mode: "NORMAL"  # Options: OFF, NORMAL, FULL
    
    # Schema configuration
    auto_create_tables: true  # Automatically create required tables
    index_creation: true  # Create indexes for common queries
    
  # No recording backend (disable all data persistence)
  none:
    # Placeholder configuration for disabled recording
    log_skip_notifications: false  # Log when recording would have occurred

# ============================================================================
# EXTENSION HOOK SYSTEM CONFIGURATION
# ============================================================================
# Configure extension hooks enabling downstream project integration
# and custom callback implementations for observation, reward, and episode logic.

hooks:
  # Hook configuration selection with environment variable override
  # Set HOOKS_CONFIG=basic|episode_stats|custom for different extension levels
  config: ${oc.env:HOOKS_CONFIG,"basic"}  # Hook configuration implementation
  
  # Hook execution configuration
  enabled: ${oc.env:HOOKS_ENABLED,"true"}  # Master hook enable/disable
  error_handling: "log_and_continue"  # Options: raise, log_and_continue, ignore
  performance_monitoring: true  # Monitor hook execution time
  
  # Basic hook configuration (minimal overhead)
  basic:
    # Core lifecycle hooks
    pre_step_enabled: false  # Execute hooks before environment step
    post_step_enabled: true  # Execute hooks after environment step
    episode_start_enabled: true  # Execute hooks at episode start
    episode_end_enabled: true  # Execute hooks at episode end
    
    # Hook execution limits
    max_execution_time: 0.01  # Maximum hook execution time (seconds)
    timeout_handling: "skip"  # Options: skip, log, raise
    
  # Episode statistics hook configuration (comprehensive data collection)
  episode_stats:
    # Statistics collection scope
    collect_trajectory_stats: true  # Compute trajectory-based statistics
    collect_performance_metrics: true  # Compute performance metrics
    collect_exploration_metrics: true  # Compute exploration statistics
    
    # Advanced statistics
    compute_path_efficiency: true  # Calculate path efficiency metrics
    compute_search_patterns: false  # Analyze search pattern characteristics
    compute_learning_curves: false  # Generate learning progression data
    
    # Export configuration
    export_summary: true  # Export episode summary statistics
    export_format: "json"  # Options: json, yaml, csv
    export_directory: ${oc.env:STATS_DIR,"outputs/stats"}  # Statistics output directory
    
  # Custom hook configuration (user-defined extensions)
  custom:
    # Custom hook module configuration
    hook_module_path: ${oc.env:CUSTOM_HOOKS_MODULE,null}  # Path to custom hook module
    hook_class_name: ${oc.env:CUSTOM_HOOKS_CLASS,"CustomHooks"}  # Hook class name
    
    # Hook parameter passing
    hook_parameters: {}  # Parameters passed to custom hook constructor
    dynamic_parameter_updates: false  # Allow runtime parameter updates
    
    # Integration configuration
    observation_extension: true  # Enable custom observation extensions
    reward_extension: true  # Enable custom reward computation
    info_extension: true  # Enable custom info dictionary extensions
    
    # Safety and validation
    validate_hook_interface: true  # Validate custom hooks implement required interface
    sandbox_execution: false  # Execute custom hooks in isolated environment

# ============================================================================
# MODULAR PLUME MODEL CONFIGURATION OVERRIDES
# ============================================================================
# Configure pluggable plume model implementations for different research
# scenarios, from fast analytical models to realistic turbulent physics.

plume_models:
  # Plume model selection with environment variable override
  # Set PLUME_MODEL_TYPE=gaussian|turbulent|video_adapter for different simulation fidelity
  type: ${oc.env:PLUME_MODEL_TYPE,"gaussian"}  # Model implementation selection
  
  # Common plume parameters applicable across all model types
  source_strength: ${oc.env:PLUME_SOURCE_STRENGTH,"1000.0"}  # Odor release rate
  source_position: [50.0, 50.0]  # Source location (x, y) coordinates
  
  # Gaussian plume model configuration (fast analytical model)
  gaussian:
    # Dispersion coefficients controlling plume spread
    dispersion_coeffs: [0.1, 0.05]  # [sigma_x, sigma_y] in spatial units
    background_concentration: 0.01  # Baseline odor concentration
    decay_rate: 0.001  # Temporal concentration decay
    
    # Advanced Gaussian parameters for research flexibility
    gaussian_kernel_size: 5  # Convolution kernel size for smoothing
    anisotropic_dispersion: false  # Enable directional dispersion differences
    
  # Turbulent plume model configuration (realistic physics simulation)
  turbulent:
    # Filament-based modeling parameters
    num_filaments: ${oc.env:TURBULENT_FILAMENTS,"500"}  # Number of odor packets
    filament_lifetime: 30.0  # Maximum filament age (seconds)
    
    # Turbulence parameters for realistic dispersion
    turbulence_intensity: 0.15  # Turbulent velocity fluctuation magnitude
    eddy_scale: 5.0  # Characteristic turbulent eddy size
    intermittency_factor: 0.7  # Spatial intermittency (0.0-1.0)
    
    # Advanced turbulent physics (optional Numba acceleration)
    enable_numba_acceleration: ${oc.env:ENABLE_NUMBA,"false"}  # JIT compilation for performance
    stochastic_transport: true  # Enable random walk transport
    
  # Video adapter configuration (existing video-based plume data)
  video_adapter:
    # Inherit video_plume configuration for backward compatibility
    inherit_video_plume_config: true  # Use existing video_plume parameters
    spatial_interpolation: "bilinear"  # Interpolation method for spatial sampling
    temporal_interpolation: "linear"  # Interpolation between video frames

# ============================================================================
# WIND FIELD DYNAMICS CONFIGURATION
# ============================================================================
# Configure environmental wind dynamics affecting plume transport and
# agent perception for realistic atmospheric simulation.

wind_fields:
  # Wind field model selection with environment variable override
  # Set WIND_FIELD_TYPE=constant|turbulent|time_varying for different dynamics
  type: ${oc.env:WIND_FIELD_TYPE,"constant"}  # Wind model implementation
  
  # Constant wind field configuration (simple directional flow)
  constant:
    # Wind velocity vector in simulation coordinates
    velocity: [2.0, 0.0]  # [u, v] wind components (m/s or spatial units/s)
    direction: 0.0  # Wind direction (degrees, 0=East, 90=North)
    speed: 2.0  # Wind speed magnitude
    
    # Vertical wind profile (optional 2.5D effects)
    enable_vertical_profile: false  # Enable height-dependent wind
    surface_roughness: 0.1  # Surface roughness parameter (m)
    
  # Turbulent wind field configuration (gusty, realistic conditions)
  turbulent:
    # Base wind parameters
    mean_velocity: [2.0, 0.3]  # Mean wind velocity components
    turbulence_intensity: [0.2, 0.15]  # Turbulence intensity [u, v] directions
    
    # Gust modeling parameters
    gust_frequency: 0.1  # Average gust frequency (Hz)
    gust_duration: 5.0  # Typical gust duration (seconds)
    max_gust_factor: 2.0  # Maximum wind speed multiplier during gusts
    
    # Spatial correlation parameters
    correlation_length: 10.0  # Spatial correlation scale (spatial units)
    temporal_correlation: 0.9  # Temporal correlation coefficient
    
  # Time-varying wind field configuration (data-driven or scheduled changes)
  time_varying:
    # Wind variation parameters
    base_wind: [1.5, 0.0]  # Base wind velocity
    variation_amplitude: [0.5, 0.3]  # Wind variation magnitude
    variation_period: 60.0  # Wind variation period (seconds)
    
    # Scheduled wind changes (optional)
    enable_wind_schedule: ${oc.env:ENABLE_WIND_SCHEDULE,"false"}  # Use scheduled changes
    wind_schedule_file: ${oc.env:WIND_SCHEDULE_PATH,"data/wind_schedule.yaml"}  # Wind schedule data

# ============================================================================
# SENSOR CONFIGURATION SYSTEMS
# ============================================================================
# Configure agent perception through pluggable sensor implementations
# supporting different sensing modalities and research requirements.

sensors:
  # Sensor type selection with environment variable override
  # Set SENSOR_TYPE=binary|concentration|gradient for different perception modes
  type: ${oc.env:SENSOR_TYPE,"concentration"}  # Primary sensor implementation
  
  # Multi-sensor configuration (enable multiple sensing modalities)
  enable_multi_sensor: ${oc.env:ENABLE_MULTI_SENSOR,"false"}  # Support multiple sensor types
  sensor_fusion_method: "concatenation"  # Options: concatenation, weighted_average, max
  
  # Binary sensor configuration (threshold-based detection)
  binary:
    # Detection threshold parameters
    detection_threshold: ${oc.env:BINARY_THRESHOLD,"0.1"}  # Odor detection threshold
    hysteresis: 0.02  # Hysteresis band to prevent oscillation
    
    # Noise modeling for realistic sensor behavior
    false_positive_rate: 0.05  # Probability of false positive detection
    false_negative_rate: 0.03  # Probability of false negative (miss)
    
    # Response characteristics
    response_time: 0.1  # Sensor response time (seconds)
    recovery_time: 0.5  # Time to clear detection after odor removal
    
  # Concentration sensor configuration (quantitative measurement)
  concentration:
    # Measurement range and precision
    dynamic_range: [0.0, 1.0]  # [min, max] measurable concentrations
    resolution: 0.001  # Measurement precision
    saturation_level: 0.95  # Saturation threshold (fraction of max range)
    
    # Noise and calibration parameters
    measurement_noise: ${oc.env:CONCENTRATION_NOISE,"0.02"}  # Additive noise std dev
    calibration_drift: 0.001  # Long-term calibration drift rate
    
    # Temporal filtering for realistic sensor dynamics
    temporal_filtering: true  # Enable temporal response filtering
    filter_time_constant: 0.2  # First-order filter time constant
    
  # Gradient sensor configuration (directional navigation cues)
  gradient:
    # Spatial differentiation parameters
    spatial_resolution: [0.5, 0.5]  # [dx, dy] finite difference spacing
    finite_difference_method: "central"  # Options: forward, backward, central
    differentiation_order: 2  # Finite difference accuracy order
    
    # Multi-point sampling configuration
    sampling_points: 4  # Number of points for gradient computation
    sampling_radius: 1.0  # Radius for multi-point sampling
    
    # Gradient filtering and processing
    enable_gradient_smoothing: true  # Apply smoothing to computed gradients
    smoothing_kernel_size: 3  # Spatial smoothing kernel size
    min_gradient_magnitude: 0.001  # Minimum reportable gradient magnitude
    
    # Advanced gradient features
    compute_higher_derivatives: false  # Enable Hessian matrix computation
    normalize_gradients: true  # Normalize gradient vectors to unit magnitude

# ============================================================================
# SIMULATION EXECUTION OVERRIDES
# ============================================================================
# Customize simulation behavior for specific research scenarios and
# performance requirements.

simulation:
  # Temporal parameter overrides for different experiment durations
  max_duration: 180.0  # Reduced from base default (300.0) for shorter experiments
  fps: 60  # Increased from base default (30) for higher temporal resolution
  
  # Real-time execution overrides for development vs production
  real_time: ${oc.env:REAL_TIME_SIM,"false"}  # Disable real-time for faster analysis
  speed_multiplier: 2.0  # 2x speed for rapid prototyping (base default: 1.0)
  
  # Initialization overrides for systematic studies
  initialization:
    auto_start: true  # Maintain automatic startup (base default: true)
    warmup_frames: 10  # Add system warmup period (base default: 0)
    random_start_positions: true  # Enable randomized starts (base default: false)
    
    # World parameter overrides for custom environments
    coordinate_system: "cartesian"  # Override from base default ("image")
  
  # Data recording configuration for comprehensive analysis
  recording:
    enabled: true  # Ensure data recording is active (base default: true)
    save_trajectories: true  # Record position data (base default: true)
    save_sensor_data: true  # Record odor measurements (base default: true)
    save_metadata: true  # Record experiment metadata (base default: true)
    
    # Export format overrides for analysis pipeline integration
    export_format: "hdf5"  # More efficient than base default ("numpy")
    compression: "gzip"  # Enable compression (base default: null)
    precision: "float32"  # Maintain precision (base default: "float32")
    
    # Recording frequency override for data management
    recording_frequency: 2  # Record every 2nd frame to reduce data volume

# ============================================================================
# VISUALIZATION CONFIGURATION OVERRIDES
# ============================================================================
# Customize visualization behavior for different presentation and analysis needs.

visualization:
  # Real-time animation overrides for development and presentation
  animation:
    enabled: true  # Enable real-time visualization (base default: false)
    fps: 30  # Match base default (30) for smooth animation
    real_time: false  # Disable real-time sync for faster processing
    
    # Display feature overrides for comprehensive visualization
    show_trails: true  # Show trajectory history (base default: true)
    trail_length: 75  # Extended trail from base default (50)
    show_sensors: true  # Display sensor ranges (base default: false)
    show_plume_overlay: true  # Overlay plume data (base default: true)
    
    # Animation export overrides for publication and sharing
    save_animation: ${oc.env:SAVE_ANIMATIONS,"false"}  # Control via environment
    animation_format: "mp4"  # High-quality format (base default: "mp4")
    animation_quality: "high"  # Maximum quality (base default: "high")
  
  # Static plot configuration for publication-quality outputs
  plotting:
    # Figure dimension overrides for publication requirements
    figure_size: [14, 10]  # Larger than base default [12, 8]
    dpi: 300  # Publication quality DPI (base default: 150)
    
    # Color scheme override for accessibility and aesthetics
    color_scheme: "plasma"  # Alternative to base default ("viridis")
    background_color: "white"  # Maintain clean background (base default: "white")
    
    # Font and text overrides for presentation
    font_size: 14  # Increased from base default (12)
    title_size: 18  # Increased from base default (16)
    
    # Trajectory visualization overrides
    trajectory_style: "both"  # Show lines and markers (base default: "line")
    trajectory_width: 2.5  # Thicker lines from base default (2.0)
    marker_size: 10  # Larger markers from base default (8)

# ============================================================================
# LOGGING AND DEBUGGING OVERRIDES
# ============================================================================
# Customize logging behavior for development, testing, and production scenarios.

logging:
  # Core logging level override with environment variable support
  # Set LOG_LEVEL=DEBUG for detailed debugging information
  level: ${oc.env:LOG_LEVEL,"INFO"}  # Maintain info level (base default: "INFO")
  
  # Output destination overrides for different deployment scenarios
  console_enabled: true  # Keep console output (base default: true)
  file_enabled: ${oc.env:LOG_TO_FILE,"true"}  # Enable file logging via environment
  file_path: ${oc.env:LOG_FILE_PATH,"logs/odor_plume_nav_user.log"}  # Custom log path
  
  # Structured logging configuration for machine-parseable output
  # Set LOG_JSON_SINK=true to enable JSON-formatted logging for production
  json_sink_enabled: ${oc.env:LOG_JSON_SINK,"false"}  # Enable structured JSON logging
  json_sink_path: ${oc.env:LOG_JSON_PATH,"logs/odor_plume_nav_structured.jsonl"}  # JSON log location
  
  # File management overrides for production deployments
  file_rotation: "5 MB"  # Smaller rotation from base default ("10 MB")
  file_retention: "2 weeks"  # Extended retention from base default ("1 week")
  
  # Performance monitoring overrides for development optimization
  performance:
    enabled: true  # Enable performance tracking (base default: false)
    timing_precision: "milliseconds"  # Maintain precision (base default: "milliseconds")
    memory_tracking: true  # Enable memory monitoring (base default: false)
    slow_operation_threshold: 0.5  # More sensitive than base default (1.0)
  
  # Component-specific logging level overrides
  components:
    navigator: "DEBUG"  # Detailed navigation logging (base default: "INFO")
    video_plume: "INFO"  # Standard video processing (base default: "INFO")
    visualization: "WARNING"  # Quiet visualization (base default: "ERROR")

# ============================================================================
# REPRODUCIBILITY AND EXPERIMENT MANAGEMENT
# ============================================================================
# Configure deterministic behavior and experiment tracking for research reproducibility.

reproducibility:
  # Seed management with environment variable support
  # Set RANDOM_SEED=42 for deterministic experiments
  global_seed: ${oc.env:RANDOM_SEED,null}  # Use environment or random seed
  
  # Enhanced seed logging for experiment tracking
  auto_seed: true  # Generate seeds automatically (base default: true)
  seed_logging: true  # Log all seeds used (base default: true)
  
  # Deterministic behavior overrides for rigorous research
  deterministic:
    strict_mode: true  # Enable strict determinism (base default: false)
    validate_reproducibility: true  # Verify reproducibility (base default: false)
    hash_verification: true  # Generate result hashes (base default: false)

# ============================================================================
# PERFORMANCE OPTIMIZATION OVERRIDES
# ============================================================================
# Customize system performance for different computational environments.

performance:
  # NumPy optimization overrides for computational efficiency
  numpy:
    # CPU thread override with environment variable support
    # Set NUMPY_THREADS=8 for multi-core optimization
    thread_count: ${oc.env:NUMPY_THREADS,"0"}  # 0 = auto-detect (base default: 0)
    memory_policy: "optimal"  # Maintain optimal setting (base default: "optimal")
    precision: "float64"  # High precision (base default: "float64")
  
  # OpenCV performance overrides for video processing optimization
  opencv:
    thread_count: 6  # Increased from base default (4)
    use_opencl: ${oc.env:OPENCV_OPENCL,"false"}  # GPU acceleration via environment
    memory_limit: 1024  # Increased from base default (512 MB)
  
  # Matplotlib performance overrides for visualization efficiency
  matplotlib:
    # Backend selection with environment override
    # Set MATPLOTLIB_BACKEND=Qt5Agg for interactive development
    backend: ${oc.env:MATPLOTLIB_BACKEND,"Agg"}  # Headless by default
    interactive: ${oc.env:MATPLOTLIB_INTERACTIVE,"false"}  # Interactive mode control
    figure_cache_size: 15  # Increased from base default (10)

# ============================================================================
# DATABASE AND PERSISTENCE OVERRIDES (FUTURE EXTENSIBILITY)
# ============================================================================
# Configure optional database features for trajectory storage and metadata persistence.

database:
  # Database enablement with environment control
  # Set ENABLE_DATABASE=true to activate persistence features
  enabled: ${oc.env:ENABLE_DATABASE,"false"}  # Disabled by default
  
  # Database connection with secure environment variable integration
  # Set DATABASE_URL=postgresql://user:pass@host:port/db for production
  url: ${oc.env:DATABASE_URL,"sqlite:///experiments.db"}  # Local SQLite default
  
  # Connection pool overrides for production deployments
  pool_size: ${oc.env:DB_POOL_SIZE,"3"}  # Reduced from base default ("5")
  max_overflow: ${oc.env:DB_MAX_OVERFLOW,"5"}  # Reduced from base default ("10")
  
  # Schema management overrides for development workflows
  schema:
    create_tables: true  # Auto-create tables (base default: true)
    drop_existing: false  # Preserve existing data (base default: false)
    table_prefix: "exp_"  # Custom prefix override (base default: "opn_")

# ============================================================================
# EXPERIMENTAL FEATURES AND ADVANCED CONFIGURATION
# ============================================================================
# Enable experimental capabilities and advanced features for cutting-edge research.

experimental:
  # Plugin system overrides for extensibility research
  plugins:
    enabled: ${oc.env:ENABLE_PLUGINS,"false"}  # Control via environment
    auto_discovery: true  # Maintain auto-discovery (base default: true)
    safe_mode: false  # Disable safe mode for development (base default: true)
  
  # Machine learning integration overrides for AI research
  ml_integration:
    enabled: ${oc.env:ENABLE_ML,"false"}  # Control via environment variable
    frameworks: ["pytorch"]  # Override empty base default
    inference_mode: ${oc.env:ML_DEVICE,"cpu"}  # GPU control via environment
  
  # Feature flags for experimental research capabilities
  features:
    neural_navigation: ${oc.env:NEURAL_NAV,"false"}  # Neural network navigation
    adaptive_sampling: ${oc.env:ADAPTIVE_SAMPLING,"false"}  # Adaptive sensor sampling
    collaborative_agents: ${oc.env:COLLABORATIVE,"false"}  # Multi-agent collaboration
    real_time_optimization: ${oc.env:REAL_TIME_OPT,"false"}  # Dynamic optimization

# ============================================================================
# HYDRA RUNTIME CONFIGURATION OVERRIDES
# ============================================================================
# Customize Hydra's execution behavior for different research workflows.

hydra:
  # Output directory management with environment variable support
  run:
    # Custom output directory with timestamp and parameter tracking
    dir: ${oc.env:HYDRA_OUTPUT_DIR,"outputs/experiments"}/${now:%Y-%m-%d_%H-%M-%S}
  
  # Multi-run experiment configuration for parameter sweeps
  sweep:
    # Organized multi-run output with experiment grouping
    dir: ${oc.env:HYDRA_MULTIRUN_DIR,"outputs/multirun"}/${now:%Y-%m-%d_%H-%M-%S}
    subdir: run_${hydra:job.num}_${hydra:job.override_dirname}
  
  # Job configuration with descriptive naming for experiment tracking
  job:
    # Dynamic job naming based on key parameters
    name: ${oc.env:EXPERIMENT_NAME,"plume_nav"}_${hydra:runtime.choices.navigator,single}_s${navigator.max_speed}_f${simulation.fps}
    chdir: false  # Maintain working directory stability (base default: false)

# ============================================================================
# CONFIGURATION EXAMPLES AND TEMPLATES
# ============================================================================
# The following examples demonstrate common research scenarios using the new
# modular architecture. Uncomment and modify for specific experiments.

# Example 1: Fast Analytical Plume with Memory-Less Agent Study
# Uncomment for rapid prototyping with simple Gaussian plume physics
# plume_models:
#   type: "gaussian"
#   gaussian:
#     dispersion_coeffs: [0.15, 0.08]
#     source_strength: 500.0
# wind_fields:
#   type: "constant"
#   constant:
#     velocity: [1.5, 0.0]
# sensors:
#   type: "binary"
#   binary:
#     detection_threshold: 0.2
#     false_positive_rate: 0.02

# Example 2: Realistic Turbulent Plume with Memory-Based Navigation
# Uncomment for high-fidelity research with complex environmental dynamics
# plume_models:
#   type: "turbulent"
#   turbulent:
#     num_filaments: 1000
#     turbulence_intensity: 0.2
#     enable_numba_acceleration: true
# wind_fields:
#   type: "turbulent"
#   turbulent:
#     mean_velocity: [2.5, 0.5]
#     turbulence_intensity: [0.25, 0.18]
#     gust_frequency: 0.15
# sensors:
#   type: "gradient"
#   enable_multi_sensor: true
#   gradient:
#     spatial_resolution: [0.3, 0.3]
#     compute_higher_derivatives: true

# Example 3: Multi-Sensor Perception Study
# Uncomment for research on sensor fusion and multi-modal perception
# sensors:
#   enable_multi_sensor: true
#   sensor_fusion_method: "weighted_average"
#   concentration:
#     dynamic_range: [0.0, 2.0]
#     measurement_noise: 0.05
#   binary:
#     detection_threshold: 0.15
#     hysteresis: 0.03
#   gradient:
#     spatial_resolution: [0.4, 0.4]
#     normalize_gradients: true

# Example 4: Video-Based Plume with Environmental Dynamics
# Uncomment for experiments using real plume data with synthetic wind
# plume_models:
#   type: "video_adapter"
#   video_adapter:
#     spatial_interpolation: "cubic"
#     temporal_interpolation: "linear"
# wind_fields:
#   type: "time_varying"
#   time_varying:
#     base_wind: [1.8, 0.2]
#     variation_amplitude: [0.8, 0.4]
#     variation_period: 45.0

# Example 5: High-Performance Multi-Agent Swarm Study
# Uncomment to activate comprehensive multi-agent navigation research
# navigator:
#   positions: [[0.0, 0.0], [10.0, 0.0], [20.0, 0.0], [30.0, 0.0], [40.0, 0.0]]
#   orientations: [0.0, 45.0, 90.0, 135.0, 180.0]
#   speeds: [0.5, 0.7, 0.9, 0.7, 0.5]
#   max_speeds: [2.0, 2.0, 2.0, 2.0, 2.0]
#   num_agents: 5
#   formation:
#     type: "line"
#     spacing: 10.0
#     maintain_formation: true
#     communication_range: 25.0

# ============================================================================
# V1.0 COMPONENT CONFIGURATION EXAMPLES
# ============================================================================
# The following examples demonstrate v1.0 component combinations for
# specific research scenarios. Uncomment and modify for experiments.

# Example V1.0-1: Single Agent Point Source Navigation
# Simple single-agent study with point source and basic recording
# source:
#   type: "point_source"
#   point_source:
#     position: [40.0, 60.0]
#     strength: 800.0
# agent_init:
#   type: "uniform_random"
#   uniform_random:
#     bounds: [[10.0, 10.0], [90.0, 90.0]]
#     min_distance_from_source: 25.0
# boundary:
#   type: "terminate"
# action:
#   type: "continuous_2d"
# record:
#   backend: "parquet"
#   full_trajectory: true
# hooks:
#   config: "basic"

# Example V1.0-2: Multi-Agent Grid Formation with Multiple Sources
# Systematic multi-agent study with coordinated starting positions
# source:
#   type: "multi_source"
#   multi_source:
#     positions: [[25.0, 25.0], [75.0, 25.0], [50.0, 75.0]]
#     strengths: [1000.0, 1200.0, 800.0]
#     additive_effects: true
# agent_init:
#   type: "grid"
#   grid:
#     grid_shape: [4, 4]
#     spacing: 8.0
#     center_position: [50.0, 30.0]
#     agent_orientations: "toward_center"
# boundary:
#   type: "bounce"
#   bounce:
#     restitution_coefficient: 0.8
#     noise_on_bounce: 0.03
# action:
#   type: "continuous_2d"
# record:
#   backend: "hdf5"
#   full_trajectory: true
#   record_internal_state: true
# hooks:
#   config: "episode_stats"

# Example V1.0-3: Dynamic Source Tracking with Discrete Actions
# Advanced study with moving source and discrete control scheme
# source:
#   type: "dynamic_source"
#   dynamic_source:
#     initial_position: [20.0, 50.0]
#     movement_type: "circular"
#     movement_speed: 1.5
#     movement_radius: 20.0
# agent_init:
#   type: "fixed_list"
#   fixed_list:
#     positions: [[70.0, 50.0], [75.0, 45.0], [75.0, 55.0]]
#     orientations: [180.0, 225.0, 135.0]
# boundary:
#   type: "wrap"
#   wrap:
#     wrap_penalty: -0.5
# action:
#   type: "cardinal_discrete"
#   cardinal_discrete:
#     num_actions: 8
#     fixed_action_magnitude: 1.2
# record:
#   backend: "sqlite"
#   recording_frequency: 2  # Record every 2nd step
# hooks:
#   config: "episode_stats"

# Example V1.0-4: Dataset-Driven Initialization with Custom Hooks
# Research scenario using experimental starting positions
# source:
#   type: "point_source"
#   point_source:
#     position: [50.0, 50.0]
#     intermittency: true
#     intermittency_frequency: 0.2
# agent_init:
#   type: "from_dataset"
#   from_dataset:
#     dataset_path: "data/experimental_starts.csv"
#     random_sampling: true
#     sample_size: 5
# boundary:
#   type: "clip"
#   clip:
#     soft_clipping: true
#     repulsion_strength: 5.0
# action:
#   type: "continuous_2d"
#   continuous_2d:
#     temporal_smoothing: true
#     smoothing_window: 5
# record:
#   backend: "parquet"
#   buffer_size: 2000
#   compression_enabled: true
# hooks:
#   config: "custom"
#   custom:
#     observation_extension: true
#     reward_extension: true

# Example V1.0-5: Performance Benchmark Configuration
# Optimized for maximum simulation throughput
# source:
#   type: "point_source"
# agent_init:
#   type: "uniform_random"
# boundary:
#   type: "terminate"
# action:
#   type: "continuous_2d"
# record:
#   backend: "none"  # Disable recording for maximum performance
# hooks:
#   config: "basic"
#   basic:
#     pre_step_enabled: false
#     post_step_enabled: false

# ============================================================================
# V0.3.0 LEGACY CONFIGURATION EXAMPLES (Maintained for Compatibility)
# ============================================================================

# Example Legacy-1: High-Resolution Video Analysis Configuration
# Uncomment for detailed video processing with advanced preprocessing
# video_plume:
#   video_path: ${oc.env:HIGH_RES_VIDEO,"data/videos/high_resolution_plume.mp4"}
#   preprocessing:
#     enhance_contrast: true
#     contrast_alpha: 1.3
#     bilateral_filter: true
#     bilateral_d: 9
#     morphology_enabled: true
#     morphology_operation: "opening"
#     morphology_kernel_size: 5
#   sampling:
#     frame_skip: 1  # Process all frames for maximum detail
#     temporal_window: 3  # 3-frame temporal averaging

# Example 3: Publication-Quality Visualization Configuration
# Uncomment for generating publication-ready figures and animations
# visualization:
#   animation:
#     enabled: true
#     save_animation: true
#     animation_format: "mp4"
#     animation_quality: "lossless"
#   plotting:
#     figure_size: [16, 12]
#     dpi: 600  # Ultra-high resolution for publications
#     color_scheme: "viridis"
#     font_family: "serif"
#     font_size: 16
#     title_size: 20

# Example 4: High-Performance Frame Caching Configuration
# Uncomment for accelerated RL training with optimized frame caching
# frame_cache:
#   mode: "lru"  # Intelligent LRU caching for memory efficiency
#   memory_limit_mb: 4096  # 4 GiB cache for large-scale experiments
#   lru:
#     preload_sequential: true
#     preload_count: 20  # Aggressive preloading for sequential access
#     memory_pressure_threshold: 0.95  # Higher memory utilization
#   monitoring:
#     target_hit_rate: 0.95  # Higher performance target for production
#     log_performance_warnings: true
#     memory_monitoring_enabled: true

# Example 5: Maximum Performance Full-Preload Configuration
# Uncomment for maximum throughput when memory permits
# frame_cache:
#   mode: "all"  # Full video preload for zero frame I/O latency
#   memory_limit_mb: 8192  # 8 GiB cache limit for large videos
#   preload_all:
#     warm_on_reset: true  # Preload during environment initialization
#     max_video_size_mb: 16384  # Support very large video files
#     memory_check_enabled: true  # Verify system memory availability
#     fallback_to_lru: true  # Graceful degradation if insufficient memory
#   monitoring:
#     target_hit_rate: 0.99  # Near-perfect hit rate expected
#     collect_statistics: true

# Example 6: Production Database Integration
# Uncomment for full database persistence in production environments
# database:
#   enabled: true
#   url: ${oc.env:DATABASE_URL,"postgresql://user:password@localhost:5432/plume_nav"}
#   pool_size: 10
#   max_overflow: 20
#   schema:
#     create_tables: true
#     table_prefix: "prod_"
#     retention_days: 365
#     auto_cleanup: true

# ============================================================================
# ENVIRONMENT VARIABLE REFERENCE
# ============================================================================
# The following environment variables are supported for deployment flexibility:
#
# General Configuration:
#   ENVIRONMENT_TYPE      - deployment environment (development|testing|production)
#   DEBUG                 - enable debug mode (true|false)
#   VERBOSE               - enable verbose output (true|false)
#   PLATFORM              - target platform (auto|linux|windows|macos)
#
# Paths and Storage:
#   DATA_DIR              - base data directory path
#   OUTPUT_DIR            - simulation output directory path
#   VIDEO_DIR             - video file directory path
#   VIDEO_PATH            - specific video file path
#   LOG_FILE_PATH         - custom log file location
#
# Navigation Parameters:
#   NAVIGATOR_MAX_SPEED   - maximum agent speed override
#   RANDOM_SEED           - deterministic experiment seed
#
# Video Processing:
#   PLUME_THRESHOLD       - binary detection threshold value
#
# V1.0 Component Architecture - New Component Selection:
#   SOURCE_TYPE           - odor source implementation (point_source|multi_source|dynamic_source)
#                          point_source: single stationary odor release point
#                          multi_source: multiple simultaneous odor sources
#                          dynamic_source: time-varying source positions
#   AGENT_INIT_TYPE       - agent initialization strategy (uniform_random|grid|fixed_list|from_dataset)
#                          uniform_random: random positions within bounds
#                          grid: systematic grid-based layouts
#                          fixed_list: predetermined explicit positions
#                          from_dataset: load positions from experimental data
#   BOUNDARY_TYPE         - boundary handling policy (terminate|bounce|wrap|clip)
#                          terminate: end episode when boundary reached
#                          bounce: elastic collision with boundaries
#                          wrap: teleport to opposite boundary
#                          clip: constrain agent within bounds
#   ACTION_TYPE           - action interface implementation (continuous_2d|cardinal_discrete)
#                          continuous_2d: standard continuous action space
#                          cardinal_discrete: discrete directional actions
#   RECORD_BACKEND        - data recording backend (parquet|hdf5|sqlite|none)
#                          parquet: high-performance columnar storage
#                          hdf5: scientific data format
#                          sqlite: relational database storage
#                          none: disable all data persistence
#   HOOKS_CONFIG          - extension hook configuration (basic|episode_stats|custom)
#                          basic: minimal overhead hook system
#                          episode_stats: comprehensive statistics collection
#                          custom: user-defined extension hooks
#
# Legacy V0.3.0 Component Selection (Maintained for Compatibility):
#   PLUME_MODEL_TYPE      - plume model implementation (gaussian|turbulent|video_adapter)
#                          gaussian: fast analytical dispersion model
#                          turbulent: realistic filament-based physics
#                          video_adapter: backward-compatible video processing
#   WIND_FIELD_TYPE       - wind dynamics model (constant|turbulent|time_varying)
#                          constant: uniform directional flow
#                          turbulent: gusty atmospheric conditions
#                          time_varying: scheduled or periodic wind changes
#   SENSOR_TYPE           - primary sensor implementation (binary|concentration|gradient)
#                          binary: threshold-based odor detection
#                          concentration: quantitative measurement
#                          gradient: directional navigation cues
#
# Plume Model Configuration:
#   PLUME_SOURCE_STRENGTH - odor release rate for analytical models (default: 1000.0)
#   TURBULENT_FILAMENTS   - number of filaments for turbulent model (default: 500)
#   ENABLE_NUMBA          - JIT acceleration for turbulent physics (true|false)
#
# V1.0 Component Configuration:
#   # Source Configuration:
#   SOURCE_POSITION       - point source position coordinates (default: "[50.0, 50.0]")
#   SOURCE_STRENGTH       - odor release rate (default: "1000.0")
#   SOURCE_MOVEMENT       - dynamic source movement type (circular|linear|random_walk|scripted)
#   MIN_SOURCE_DISTANCE   - minimum agent distance from source (default: "20.0")
#   
#   # Agent Initialization Configuration:
#   GRID_SHAPE            - grid dimensions for grid initialization (default: "[3, 3]")
#   GRID_SPACING          - distance between grid points (default: "10.0")
#   INIT_DATASET_PATH     - path to initialization dataset (default: "data/agent_starts.csv")
#   
#   # Boundary Policy Configuration:
#   BOUNDARY_REWARD       - reward for boundary violation (default: "-10.0")
#   BOUNCE_RESTITUTION    - energy retention after bounce (default: "0.8")
#   WRAP_PENALTY          - reward penalty for boundary wrapping (default: "-1.0")
#   
#   # Action Interface Configuration:
#   MAX_ACCELERATION      - maximum action magnitude (default: "5.0")
#   NUM_ACTIONS           - number of discrete actions (default: "8")
#   ACTION_MAGNITUDE      - fixed action strength for discrete actions (default: "1.0")
#   
#   # Recording Configuration:
#   RECORD_ENABLED        - enable data recording (true|false)
#   RECORD_FULL           - record per-step trajectories (true|false)
#   RECORD_FREQ           - recording frequency (default: "1")
#   RECORD_BUFFER_SIZE    - buffer size for batch writes (default: "1000")
#   PARQUET_DIR           - parquet output directory (default: "outputs/data/parquet")
#   HDF5_DIR              - HDF5 output directory (default: "outputs/data/hdf5")
#   SQLITE_PATH           - SQLite database path (default: "outputs/data/experiments.db")
#   
#   # Extension Hook Configuration:
#   HOOKS_ENABLED         - enable extension hooks (true|false)
#   STATS_DIR             - statistics export directory (default: "outputs/stats")
#   CUSTOM_HOOKS_MODULE   - path to custom hook module
#   CUSTOM_HOOKS_CLASS    - custom hook class name (default: "CustomHooks")
#
# Legacy V0.3.0 Component Configuration:
#   # Sensor Configuration:
#   ENABLE_MULTI_SENSOR   - enable multiple sensor modalities (true|false)
#   BINARY_THRESHOLD      - binary sensor detection threshold (default: 0.1)
#   CONCENTRATION_NOISE   - concentration sensor noise level (default: 0.02)
#   
#   # Wind Field Configuration:
#   ENABLE_WIND_SCHEDULE  - use scheduled wind changes (true|false)
#   WIND_SCHEDULE_PATH    - path to wind schedule data file
#
# Frame Caching (Gymnasium Migration Enhanced):
#   FRAME_CACHE_MODE      - cache strategy (none|lru|all)
#                          none: memoryless flavor, minimal memory usage
#                          lru: intelligent caching with eviction policy  
#                          all: full preload for maximum performance
#   FRAME_CACHE_SIZE_MB   - cache memory limit in megabytes (default: 2048)
#                          automatically enforced per Section 0.3.1 requirements
#
# Structured Logging:
#   LOG_JSON_SINK         - enable JSON logging (true|false)
#   LOG_JSON_PATH         - JSON log file location
#
# Performance and System:
#   NUMPY_THREADS         - NumPy thread count for optimization
#   OPENCV_OPENCL         - enable OpenCV GPU acceleration (true|false)
#   MATPLOTLIB_BACKEND    - matplotlib rendering backend
#   MATPLOTLIB_INTERACTIVE - enable interactive plotting (true|false)
#
# Database and Persistence:
#   ENABLE_DATABASE       - activate database features (true|false)
#   DATABASE_URL          - database connection string
#   DB_POOL_SIZE          - connection pool size
#   DB_MAX_OVERFLOW       - maximum pool overflow
#
# Experimental Features:
#   ENABLE_PLUGINS        - activate plugin system (true|false)
#   ENABLE_ML             - enable ML integration (true|false)
#   ML_DEVICE             - ML inference device (cpu|gpu|auto)
#   NEURAL_NAV            - enable neural navigation (true|false)
#   ADAPTIVE_SAMPLING     - enable adaptive sampling (true|false)
#   COLLABORATIVE         - enable collaborative agents (true|false)
#   REAL_TIME_OPT         - enable real-time optimization (true|false)
#
# Hydra and Execution:
#   HYDRA_OUTPUT_DIR      - Hydra output directory override
#   HYDRA_MULTIRUN_DIR    - multi-run experiment directory
#   EXPERIMENT_NAME       - custom experiment naming
#   REAL_TIME_SIM         - real-time simulation mode (true|false)
#   SAVE_ANIMATIONS       - save animation outputs (true|false)
#   LOG_LEVEL             - logging verbosity (DEBUG|INFO|WARNING|ERROR)
#   LOG_TO_FILE           - enable file logging (true|false)
#
# Usage Instructions:
#   1. Create a .env file in your project root with desired variables
#   2. Set system environment variables for production deployments  
#   3. Use Hydra CLI overrides for dynamic parameter modification
#   4. Combine environment variables with CLI overrides for maximum flexibility
#
# Example .env file (Traditional Configuration):
#   ENVIRONMENT_TYPE=production
#   DEBUG=false
#   DATABASE_URL=postgresql://user:pass@host:port/db
#   NUMPY_THREADS=8
#   VIDEO_PATH=/data/experiments/plume_video.mp4
#   RANDOM_SEED=42
#   
#   # Frame cache configuration for Gymnasium migration
#   FRAME_CACHE_MODE=lru              # Use LRU caching (memory flavor)
#   FRAME_CACHE_SIZE_MB=4096          # 4 GiB cache limit for large experiments
#   # FRAME_CACHE_MODE=none           # Alternative: memoryless flavor
#   # FRAME_CACHE_SIZE_MB=0           # Alternative: minimal memory usage
#   
#   LOG_JSON_SINK=true
#
# Example .env file (V1.0 Component Architecture - Fast Research):
#   ENVIRONMENT_TYPE=development
#   DEBUG=true
#   
#   # V1.0 component configuration for rapid prototyping
#   SOURCE_TYPE=point_source          # Single stationary source
#   AGENT_INIT_TYPE=uniform_random    # Random agent placement
#   BOUNDARY_TYPE=terminate           # Simple boundary handling
#   ACTION_TYPE=continuous_2d         # Standard continuous actions
#   RECORD_BACKEND=none               # Disable recording for speed
#   HOOKS_CONFIG=basic                # Minimal hook overhead
#   
#   # Legacy component configuration (fast analytical)
#   PLUME_MODEL_TYPE=gaussian         # Simple Gaussian dispersion model
#   WIND_FIELD_TYPE=constant          # Uniform wind field
#   SENSOR_TYPE=binary                # Threshold-based detection
#   
#   # Component parameters
#   SOURCE_POSITION="[25.0, 25.0]"   # Offset source position
#   SOURCE_STRENGTH=500.0             # Moderate source strength
#   BINARY_THRESHOLD=0.15             # Sensitive detection threshold
#   MIN_SOURCE_DISTANCE=15.0          # Closer agent starts
#   
#   # Performance optimization
#   FRAME_CACHE_MODE=lru
#   NUMPY_THREADS=4
#   
# Example .env file (V1.0 Component Architecture - High-Fidelity Research):
#   ENVIRONMENT_TYPE=production
#   DEBUG=false
#   
#   # V1.0 component configuration for realistic simulation
#   SOURCE_TYPE=dynamic_source        # Time-varying source positions
#   AGENT_INIT_TYPE=grid              # Systematic agent placement
#   BOUNDARY_TYPE=bounce              # Physical boundary interactions
#   ACTION_TYPE=continuous_2d         # Full continuous control
#   RECORD_BACKEND=parquet            # High-performance data storage
#   HOOKS_CONFIG=episode_stats        # Comprehensive statistics
#   
#   # Legacy component configuration (realistic physics)
#   PLUME_MODEL_TYPE=turbulent        # Filament-based turbulent physics
#   WIND_FIELD_TYPE=turbulent         # Gusty atmospheric conditions
#   SENSOR_TYPE=gradient              # Directional navigation cues
#   
#   # V1.0 component parameters
#   SOURCE_MOVEMENT=circular          # Circular source movement
#   GRID_SHAPE="[5, 5]"              # 5x5 agent grid
#   GRID_SPACING=8.0                  # Tight grid spacing
#   BOUNCE_RESTITUTION=0.9            # High-energy bounces
#   RECORD_FULL=true                  # Full trajectory recording
#   RECORD_BUFFER_SIZE=2000           # Large recording buffer
#   
#   # Legacy component parameters
#   TURBULENT_FILAMENTS=1500          # High-resolution filament field
#   ENABLE_NUMBA=true                 # JIT acceleration for performance
#   ENABLE_MULTI_SENSOR=true          # Enable sensor fusion
#   CONCENTRATION_NOISE=0.025         # Realistic sensor noise
#   
#   # High-performance caching and system optimization
#   FRAME_CACHE_MODE=lru
#   FRAME_CACHE_SIZE_MB=8192          # 8 GiB for complex simulations
#   NUMPY_THREADS=16                  # Multi-core optimization
#   
#   # Structured logging and data export
#   LOG_JSON_SINK=true
#   LOG_LEVEL=INFO
#   STATS_DIR=outputs/comprehensive_stats
#   PARQUET_DIR=outputs/experiment_data
#
# Example .env file (V1.0 Multi-Source Swarm Study):
#   ENVIRONMENT_TYPE=production
#   DEBUG=false
#   
#   # Multi-source, multi-agent configuration
#   SOURCE_TYPE=multi_source          # Multiple simultaneous sources
#   AGENT_INIT_TYPE=grid              # Grid formation start
#   BOUNDARY_TYPE=wrap                # Boundary wrapping for continuous exploration
#   ACTION_TYPE=cardinal_discrete     # Discrete action space
#   RECORD_BACKEND=hdf5               # Scientific data format
#   HOOKS_CONFIG=episode_stats        # Advanced statistics collection
#   
#   # Multi-source parameters (configured in YAML)
#   # Positions: [[20,20], [80,20], [50,80]]
#   # Strengths: [800, 1200, 1000]
#   
#   # Grid initialization parameters
#   GRID_SHAPE="[6, 6]"              # 6x6 agent formation
#   GRID_SPACING=12.0                 # Wide agent spacing
#   
#   # Discrete action configuration
#   NUM_ACTIONS=8                     # 8-directional movement
#   ACTION_MAGNITUDE=1.5              # Strong action magnitude
#   
#   # Data recording configuration
#   RECORD_FULL=true                  # Complete trajectory data
#   HDF5_DIR=outputs/swarm_data       # Dedicated swarm data directory
#   STATS_DIR=outputs/swarm_stats     # Swarm-specific statistics
#   
#   # System optimization
#   FRAME_CACHE_MODE=all              # Full preload for performance
#   FRAME_CACHE_SIZE_MB=4096          # 4 GiB cache
#   LOG_LEVEL=WARNING                 # Quiet logging for production
#
# ============================================================================
# V1.0 COMPONENT-BASED ARCHITECTURE SUMMARY
# ============================================================================
# The v1.0 release transforms plume_nav_sim into a general-purpose, extensible
# simulation toolkit through protocol-driven component abstractions enabling
# zero-code customization and configuration-driven research workflows.
#
# V1.0 NEW COMPONENT ABSTRACTIONS:
#   1. Source Abstraction: Pluggable odor source modeling (point, multi, dynamic)
#      supporting flexible source positioning, strength control, and detection algorithms
#   2. Agent Initialization: Configurable starting position strategies (random, grid, 
#      fixed, dataset-driven) enabling systematic experimental design
#   3. Boundary Policies: Flexible domain edge handling (terminate, bounce, wrap, clip)
#      supporting different physics behaviors and experimental constraints
#   4. Action Interfaces: Unified action processing (continuous, discrete) enabling
#      seamless integration with diverse RL frameworks and control schemes
#   5. Recording System: Comprehensive data persistence (parquet, hdf5, sqlite)
#      with performance-aware buffering and configurable data selection
#   6. Extension Hooks: Zero-code extensibility through callback interfaces
#      enabling downstream projects to customize observations, rewards, and episode logic
#
# V0.3.0 LEGACY COMPONENTS (Maintained for Backward Compatibility):
#   1. Plume Models: Switch between analytical (gaussian), realistic (turbulent), 
#      and video-based (video_adapter) odor dispersion physics
#   2. Wind Fields: Configure environmental dynamics from simple (constant) to 
#      complex (turbulent) atmospheric conditions
#   3. Sensors: Support different perception modalities (binary, concentration, gradient)
#      with optional multi-sensor fusion capabilities
#
# V1.0 CONFIGURATION-DRIVEN RESEARCH SCENARIOS:
#   - Single vs Multi-Source Studies: Compare navigation strategies across
#     different source configurations without code changes
#   - Formation Control Research: Test grid, line, and custom agent formations
#     with systematic initialization strategies
#   - Boundary Behavior Analysis: Study agent responses to domain edges using
#     different boundary policies (physics-based vs termination)
#   - Action Space Comparisons: Evaluate continuous vs discrete control schemes
#     with unified interface and consistent environment dynamics
#   - Data Collection Optimization: Configure recording granularity and formats
#     for specific analysis requirements and performance constraints
#   - Extension Hook Validation: Test custom observations, rewards, and episode
#     logic through standardized callback interfaces
#
# V0.3.0 → V1.0 MIGRATION BENEFITS:
#   - Zero Breaking Changes: All v0.3.0 configurations remain fully compatible
#   - Progressive Enhancement: New components are opt-in and configurable
#   - Performance Preservation: ≤33ms step latency maintained across all components
#   - Scientific Reproducibility: Deterministic seeding and configuration snapshots
#   - Cross-Project Compatibility: Standardized interfaces enable ecosystem growth
#
# RESEARCH WORKFLOW EXAMPLES:
#   1. V1.0 Rapid Prototyping: point_source + uniform_random + terminate + continuous_2d + none
#   2. V1.0 Multi-Agent Formation: multi_source + grid + bounce + continuous_2d + parquet
#   3. V1.0 Dynamic Tracking: dynamic_source + fixed_list + wrap + cardinal_discrete + hdf5
#   4. V1.0 Dataset Integration: point_source + from_dataset + clip + continuous_2d + sqlite
#   5. V1.0 Extension Development: any_source + any_init + any_boundary + any_action + custom_hooks
#   6. Legacy Compatibility: gaussian plume + constant wind + binary sensor (unchanged)
#   7. Hybrid V1.0+Legacy: dynamic_source + turbulent plume + gradient sensor + episode_stats
#
# COMPONENT COMPOSITION CAPABILITIES:
#   - Independent Component Selection: Mix and match any source with any boundary policy
#   - Environment Variable Control: Enable automated parameter sweeps across all components
#   - Multi-Run Experiments: Compare component combinations systematically
#   - Performance Scaling: Configure complexity from minimal (sub-ms) to comprehensive (research-grade)
#   - Extension Integration: Add custom logic without modifying core simulation engine
#
# ============================================================================
# END OF V1.0 USER CONFIGURATION
# ============================================================================
# This configuration demonstrates the comprehensive v1.0 component-based
# architecture with protocol-driven abstractions, zero-code extensibility,
# and full backward compatibility with v0.3.0 systems. All parameters
# can be overridden through CLI arguments, environment variables, or local
# configuration files for maximum deployment flexibility.
#
# V1.0 ARCHITECTURE DOCUMENTATION:
#   - conf/base.yaml for foundational system defaults
#   - conf/base/source/ for source component configurations
#   - conf/base/agent_init/ for initialization strategy templates
#   - conf/base/boundary/ for boundary policy specifications
#   - conf/base/action/ for action interface configurations
#   - conf/base/record/ for recording backend settings
#   - conf/base/hooks/ for extension hook templates
#   - conf/local/ directory for environment-specific overrides
#   - Technical specification sections covering component protocols
#   - src/plume_nav_sim/core/protocols.py for component interface definitions
#   - Migration guide documentation for v0.3.0 → v1.0 transitions
#
# V1.0 COMPONENT VALIDATION:
#   All component configurations include comprehensive validation schemas
#   with type checking, parameter bounds validation, and interface compliance
#   verification to ensure configuration correctness at startup.
#
# CLI Override Examples:
#   # Basic parameter overrides (backward compatible)
#   python -m plume_nav_sim.cli.main navigator.max_speed=2.0 simulation.fps=60
#   python -m plume_nav_sim.cli.main --multirun navigator.speed=0.5,1.0,1.5
#   python -m plume_nav_sim.cli.main video_plume.kernel_size=5 +environment=production
#   
#   # V1.0 Component configuration examples (NEW)
#   python -m plume_nav_sim.cli.main source=point_source boundary=terminate action=continuous_2d
#   python -m plume_nav_sim.cli.main source=multi_source agent_init=grid record=parquet
#   python -m plume_nav_sim.cli.main source=dynamic_source boundary=bounce hooks=episode_stats
#   
#   # V1.0 Component parameter overrides
#   python -m plume_nav_sim.cli.main source.point_source.position="[25.0,75.0]"
#   python -m plume_nav_sim.cli.main agent_init.grid.grid_shape="[5,5]" agent_init.grid.spacing=8.0
#   python -m plume_nav_sim.cli.main boundary.bounce.restitution_coefficient=0.9
#   python -m plume_nav_sim.cli.main record.parquet.compression_algorithm=gzip
#   
#   # Multi-run experiments with V1.0 component sweeps
#   python -m plume_nav_sim.cli.main --multirun source=point_source,multi_source,dynamic_source
#   python -m plume_nav_sim.cli.main --multirun boundary=terminate,bounce,wrap,clip
#   python -m plume_nav_sim.cli.main --multirun action=continuous_2d,cardinal_discrete
#   python -m plume_nav_sim.cli.main --multirun record.backend=parquet,hdf5,sqlite
#   python -m plume_nav_sim.cli.main --multirun agent_init=uniform_random,grid agent_init.grid.grid_shape="[3,3],[5,5]"
#   
#   # V1.0 + Legacy component combinations
#   python -m plume_nav_sim.cli.main source=point_source plume_models=gaussian sensors=binary
#   python -m plume_nav_sim.cli.main source=dynamic_source plume_models=turbulent sensors=gradient
#   python -m plume_nav_sim.cli.main boundary=bounce wind_fields=turbulent record=hdf5
#   
#   # Legacy modular architecture examples (maintained for compatibility)
#   python -m plume_nav_sim.cli.main plume_models=gaussian wind_fields=constant sensors=binary
#   python -m plume_nav_sim.cli.main plume_models=turbulent sensors=gradient
#   python -m plume_nav_sim.cli.main plume_models.type=video_adapter wind_fields.type=turbulent
#   
#   # Legacy multi-run experiments
#   python -m plume_nav_sim.cli.main --multirun plume_models=gaussian,turbulent sensors=binary,concentration
#   python -m plume_nav_sim.cli.main --multirun wind_fields=constant,turbulent,time_varying
#   python -m plume_nav_sim.cli.main --multirun plume_models=gaussian plume_models.gaussian.dispersion_coeffs="[0.1,0.05],[0.2,0.1]"
#   
#   # V0.3.0 → V1.0 Migration examples (component equivalency)
#   # V0.3.0: Hard-coded single source behavior
#   # V1.0:   Configurable source abstraction
#   python -m plume_nav_sim.cli.main source=point_source source.point_source.position="[50.0,50.0]"
#   
#   # V0.3.0: Fixed agent initialization
#   # V1.0:   Flexible initialization strategies
#   python -m plume_nav_sim.cli.main agent_init=uniform_random  # V0.3.0 equivalent
#   python -m plume_nav_sim.cli.main agent_init=grid agent_init.grid.grid_shape="[3,3]"  # NEW capability
#   
#   # V0.3.0: Hard-coded boundary termination
#   # V1.0:   Configurable boundary policies
#   python -m plume_nav_sim.cli.main boundary=terminate  # V0.3.0 equivalent
#   python -m plume_nav_sim.cli.main boundary=bounce  # NEW physics-based behavior
#   
#   # V0.3.0: Fixed action processing
#   # V1.0:   Unified action interface
#   python -m plume_nav_sim.cli.main action=continuous_2d  # V0.3.0 equivalent
#   python -m plume_nav_sim.cli.main action=cardinal_discrete  # NEW discrete action support
#   
#   # V0.3.0: Basic trajectory recording
#   # V1.0:   Comprehensive data recording system
#   python -m plume_nav_sim.cli.main record=none  # V0.3.0 minimal recording
#   python -m plume_nav_sim.cli.main record=parquet record.full_trajectory=true  # NEW high-performance recording
#   
#   # Memory-based vs memoryless agent comparison with V1.0 components
#   python -m plume_nav_sim.cli.main source=point_source plume_models=gaussian sensors=concentration  # Memoryless compatible
#   python -m plume_nav_sim.cli.main source=dynamic_source plume_models=turbulent sensors=gradient hooks=episode_stats  # Memory-enabled navigation
#   
#   # Frame cache configuration with environment flavors (Gymnasium migration)
#   python -m odor_plume_nav.cli.main frame_cache.mode=lru frame_cache.memory_limit_mb=4096
#   python -m odor_plume_nav.cli.main frame_cache.mode=all logging.json_sink_enabled=true
#   python -m odor_plume_nav.cli.main frame_cache.mode=none  # Memoryless operation
#   python -m odor_plume_nav.cli.main --multirun frame_cache.mode=none,lru,all
#   
#   # Environment flavor integration with frame cache
#   python -m odor_plume_nav.cli.main +env/flavors=memoryless  # Minimal memory usage
#   python -m odor_plume_nav.cli.main +env/flavors=memory     # Optimized caching
#   python -m odor_plume_nav.cli.main +env/flavors=memory frame_cache.mode=all
#   
#   # Advanced modular component configuration examples
#   python -m odor_plume_nav.cli.main plume_models=turbulent plume_models.turbulent.num_filaments=1000
#   python -m odor_plume_nav.cli.main sensors=gradient sensors.gradient.spatial_resolution="[0.3,0.3]"
#   python -m odor_plume_nav.cli.main wind_fields=turbulent wind_fields.turbulent.gust_frequency=0.2
#
# Compose API Examples:
#   from hydra import compose, initialize
#   with initialize(config_path="../conf"):
#       cfg = compose(config_name="config", overrides=["navigator.max_speed=3.0"])
#
# Environment Integration:
#   export ENVIRONMENT_TYPE=production
#   export DATABASE_URL=postgresql://localhost/experiments
#   export FRAME_CACHE_MODE=lru
#   export FRAME_CACHE_SIZE_MB=4096
#   export LOG_JSON_SINK=true
#   python -m odor_plume_nav.cli.main
#
# V1.0 Component Architecture Environment Integration:
#   # Simple single-agent point source navigation
#   export SOURCE_TYPE=point_source
#   export AGENT_INIT_TYPE=uniform_random
#   export BOUNDARY_TYPE=terminate
#   export ACTION_TYPE=continuous_2d
#   export RECORD_BACKEND=parquet
#   export HOOKS_CONFIG=basic
#   python -m plume_nav_sim.cli.main
#   
#   # Multi-agent grid formation with multiple sources
#   export SOURCE_TYPE=multi_source
#   export AGENT_INIT_TYPE=grid
#   export BOUNDARY_TYPE=bounce
#   export ACTION_TYPE=continuous_2d
#   export RECORD_BACKEND=hdf5
#   export HOOKS_CONFIG=episode_stats
#   export GRID_SHAPE="[4,4]"
#   export BOUNCE_RESTITUTION=0.9
#   python -m plume_nav_sim.cli.main
#   
#   # Dynamic source tracking with discrete actions
#   export SOURCE_TYPE=dynamic_source
#   export AGENT_INIT_TYPE=fixed_list
#   export BOUNDARY_TYPE=wrap
#   export ACTION_TYPE=cardinal_discrete
#   export RECORD_BACKEND=sqlite
#   export SOURCE_MOVEMENT=circular
#   export NUM_ACTIONS=8
#   python -m plume_nav_sim.cli.main
#   
#   # Dataset-driven experimental setup
#   export SOURCE_TYPE=point_source
#   export AGENT_INIT_TYPE=from_dataset
#   export BOUNDARY_TYPE=clip
#   export RECORD_BACKEND=parquet
#   export HOOKS_CONFIG=custom
#   export INIT_DATASET_PATH=data/experimental_starts.csv
#   python -m plume_nav_sim.cli.main
#
# Legacy V0.3.0 Environment Integration (Maintained for Compatibility):
#   # Fast analytical simulation for rapid prototyping
#   export PLUME_MODEL_TYPE=gaussian
#   export WIND_FIELD_TYPE=constant
#   export SENSOR_TYPE=binary
#   python -m plume_nav_sim.cli.main
#   
#   # High-fidelity turbulent simulation for research
#   export PLUME_MODEL_TYPE=turbulent
#   export WIND_FIELD_TYPE=turbulent
#   export SENSOR_TYPE=gradient
#   export TURBULENT_FILAMENTS=1000
#   export ENABLE_NUMBA=true
#   python -m plume_nav_sim.cli.main
#   
#   # Multi-sensor perception study
#   export SENSOR_TYPE=concentration
#   export ENABLE_MULTI_SENSOR=true
#   export CONCENTRATION_NOISE=0.03
#   python -m plume_nav_sim.cli.main sensors=gradient +sensors=binary
#   
#   # Video-based plume with dynamic wind
#   export PLUME_MODEL_TYPE=video_adapter
#   export WIND_FIELD_TYPE=time_varying
#   export ENABLE_WIND_SCHEDULE=true
#   export VIDEO_PATH=/data/experiments/realistic_plume.mp4
#   python -m plume_nav_sim.cli.main
#
# V1.0 + Legacy Hybrid Configuration:
#   # Combine v1.0 components with legacy environmental modeling
#   export SOURCE_TYPE=dynamic_source              # V1.0 dynamic source
#   export AGENT_INIT_TYPE=grid                    # V1.0 grid initialization
#   export BOUNDARY_TYPE=bounce                    # V1.0 bounce policy
#   export PLUME_MODEL_TYPE=turbulent              # Legacy turbulent physics
#   export SENSOR_TYPE=gradient                    # Legacy gradient sensing
#   export RECORD_BACKEND=hdf5                     # V1.0 HDF5 recording
#   export HOOKS_CONFIG=episode_stats              # V1.0 statistics hooks
#   python -m plume_nav_sim.cli.main
# ============================================================================