# ============================================================================
# ODOR PLUME NAVIGATION: USER CONFIGURATION (config.yaml)
# ============================================================================
#
# This file serves as the primary user configuration template demonstrating
# Hydra's hierarchical composition patterns, environment variable interpolation,
# and sophisticated parameter override capabilities. It inherits from conf/base.yaml
# while providing comprehensive examples of customization and deployment patterns.
#
# Configuration Hierarchy and Composition:
#   1. conf/base.yaml (inherited defaults) - System foundation parameters
#   2. conf/config.yaml (THIS FILE) - User-driven customizations and overrides  
#   3. conf/local/*.yaml (runtime overrides) - Environment-specific secrets
#   4. CLI parameter overrides - Dynamic runtime modifications
#
# Key Features Demonstrated:
#   - Hydra defaults composition and selective parameter inheritance
#   - Environment variable interpolation for secure credential management
#   - Configuration group selection and multi-run execution patterns
#   - Advanced override examples supporting development and production workflows
#   - Comprehensive parameter customization while maintaining type safety
#
# Usage Examples:
#   Basic execution:
#     python -m odor_plume_nav.cli.main
#
#   Parameter override examples:
#     python -m odor_plume_nav.cli.main navigator.max_speed=2.0
#     python -m odor_plume_nav.cli.main video_plume.flip=true simulation.fps=60
#     python -m odor_plume_nav.cli.main environment.type=production
#
#   Multi-run execution for parameter sweeps:
#     python -m odor_plume_nav.cli.main --multirun navigator.max_speed=1.0,2.0,3.0
#     python -m odor_plume_nav.cli.main --multirun video_plume.kernel_size=3,5,7
#
#   Configuration group selection:
#     python -m odor_plume_nav.cli.main +navigator=multi_agent
#     python -m odor_plume_nav.cli.main +environment=development
#
# Environment Variables:
#   This configuration demonstrates secure environment variable integration
#   through ${oc.env:VAR_NAME,default} syntax. Create a .env file or set
#   system environment variables for production deployments.
#
# ============================================================================

# Hydra defaults configuration enabling hierarchical composition and
# configuration group management for sophisticated experiment orchestration
defaults:
  # Inherit foundational parameters from base configuration
  - base
  
  # Frame caching configuration group for high-performance frame storage
  # LRU cache mode provides intelligent eviction with memory management
  # Compatible with environment flavors: memoryless, memory
  - override frame_cache: lru
  
  # MODULAR ARCHITECTURE: Pluggable component configuration groups
  # Enable configuration-driven switching between different implementations
  # without code modifications, supporting diverse research scenarios
  
  # Plume model selection for different simulation fidelity levels
  # Switch between fast analytical models and realistic turbulent physics
  - plume_models: ${oc.env:PLUME_MODEL_TYPE,"gaussian"}  # Options: gaussian, turbulent, video_adapter
  
  # Wind field dynamics configuration for environmental realism
  # Control atmospheric conditions affecting plume transport
  - wind_fields: ${oc.env:WIND_FIELD_TYPE,"constant"}  # Options: constant, turbulent, time_varying
  
  # Sensor configuration for flexible perception modeling
  # Support different sensing modalities for navigation research
  - sensors: ${oc.env:SENSOR_TYPE,"concentration"}  # Options: binary, concentration, gradient
  
  # Optional configuration group overrides (prefix with + to add, - to remove)
  # Uncomment and modify as needed for specific use cases
  # - override navigator: multi_agent        # Switch to multi-agent navigation
  # - override video_plume: high_resolution  # Use high-resolution processing
  # - override visualization: publication    # Publication-quality plots
  # - override environment: development      # Development environment settings
  
  # Alternative modular component configurations for research scenarios
  # - override plume_models: turbulent      # Switch to realistic turbulent physics
  # - override wind_fields: turbulent       # Enable gusty, time-varying wind
  # - override sensors: gradient            # Use gradient-based navigation cues
  
  # Multi-sensor configuration examples (use + prefix to add multiple)
  # - +sensors: binary                      # Add binary detection to existing sensors
  # - +sensors: gradient                    # Add gradient computation for multi-modal perception
  
  # Alternative frame cache modes for different performance scenarios
  # - override frame_cache: preload_all  # Full preload mode for maximum performance
  # - override frame_cache: disabled     # Disable caching for debugging
  # - override frame_cache: none         # Memoryless mode for minimal memory usage
  
  # Enable this configuration file as the primary override source
  - _self_

# ============================================================================
# ENVIRONMENT AND DEPLOYMENT CONFIGURATION OVERRIDES
# ============================================================================
# Customize system behavior for different deployment scenarios with
# environment variable integration for secure credential management.

environment:
  # Environment type override with secure default fallback
  # Set ENVIRONMENT_TYPE=production for production deployments
  type: ${oc.env:ENVIRONMENT_TYPE,"development"}  # Options: development, testing, production
  
  # Debug mode control through environment variables
  # Set DEBUG=true for enhanced debugging during development
  debug_mode: ${oc.env:DEBUG,"true"}  # Enable debug features and verbose logging
  
  # Verbose output control for detailed execution tracking
  # Set VERBOSE=false for quieter production operation
  verbose_output: ${oc.env:VERBOSE,"true"}  # Show detailed operation progress
  
  # Platform-specific configuration with automatic detection
  # Override with PLATFORM=linux|windows|macos for specific deployments
  platform: ${oc.env:PLATFORM,"auto"}  # Target platform optimization
  
  # Performance and resource configuration overrides
  paths:
    # Data directory with flexible environment variable support
    # Set DATA_DIR=/path/to/data for custom data locations
    data_dir: ${oc.env:DATA_DIR,"data"}
    
    # Output directory for simulation results and visualizations  
    # Set OUTPUT_DIR=/path/to/outputs for custom output locations
    output_dir: ${oc.env:OUTPUT_DIR,"outputs"}
    
    # Video directory with environment variable override capability
    # Set VIDEO_DIR=/path/to/videos for custom video storage
    video_dir: ${oc.env:VIDEO_DIR,"data/videos"}

# ============================================================================
# FRAME CACHE CONFIGURATION OVERRIDES
# ============================================================================
# High-performance frame caching system for accelerated reinforcement learning
# training workflows with sub-10ms frame retrieval targets and intelligent
# memory management supporting LRU eviction and full-preload strategies.
#
# Environment Flavor Compatibility:
#   - memoryless.yaml: Uses mode="none" for minimal memory footprint
#   - memory.yaml: Uses mode="lru" or mode="all" for optimized caching
#   - Custom flavors: Full configurability via environment variables
#
# Gymnasium Migration Enhancement:
#   - Compatible with new 5-tuple step returns
#   - Supports enhanced performance requirements (mean step() < 10ms)
#   - Memory limit enforcement per Section 0.3.1 (â‰¤ 2 GiB RAM cap)

frame_cache:
  # Cache operation mode with environment variable override capability
  # Set FRAME_CACHE_MODE=lru|all|none for deployment-specific cache behavior
  # Options: "none" (disabled), "lru" (intelligent caching), "all" (full preload)
  mode: ${oc.env:FRAME_CACHE_MODE,"lru"}  # Cache strategy selection
  
  # Memory management configuration with runtime override support
  # Set FRAME_CACHE_SIZE_MB=4096 for custom memory limits in production
  memory_limit_mb: ${oc.env:FRAME_CACHE_SIZE_MB,"2048"}  # Default 2 GiB memory limit
  
  # Enable high-performance statistics collection for all cache modes
  # Required for gymnasium compliance and performance monitoring
  enable_statistics: true  # Collect cache hit/miss statistics per Section 0.3.3
  
  # Memoryless cache configuration for minimal memory usage (memoryless flavor)
  none:
    # Disable all caching for memory-constrained environments
    bypass_cache: true  # Skip cache entirely for true memoryless operation
    direct_frame_access: true  # Direct video frame access without buffering
    minimal_metadata: true  # Reduce metadata overhead for minimal memory
  
  # LRU cache behavior overrides for memory-efficient frame storage
  lru:
    # Maximum number of frames to cache before eviction starts
    # Automatically calculated from memory_limit_mb and frame size if null
    max_frames: null  # Auto-calculate based on memory limit
    
    # Cache preloading strategy for sequential access optimization
    preload_sequential: true  # Preload next frames for sequential access
    preload_count: 10  # Number of sequential frames to preload ahead
    
    # Eviction policy configuration for memory pressure management
    eviction_batch_size: 5  # Number of frames to evict when memory threshold reached
    memory_pressure_threshold: 0.9  # Memory usage threshold triggering eviction (0.0-1.0)
  
  # Full preload cache configuration for maximum performance scenarios
  preload_all:
    # Enable warming cache during environment initialization
    warm_on_reset: true  # Preload all frames during environment reset
    
    # Memory protection settings for large video files
    max_video_size_mb: 8192  # Maximum video size for full preload (8 GiB)
    memory_check_enabled: true  # Verify available system memory before preload
    fallback_to_lru: true  # Fall back to LRU mode if memory insufficient
  
  # Cache performance monitoring and optimization settings
  monitoring:
    # Performance threshold monitoring for cache effectiveness
    target_hit_rate: 0.90  # Target cache hit rate for performance validation
    
    # Statistics collection and reporting configuration
    collect_statistics: true  # Enable cache hit/miss statistics collection
    statistics_window: 1000  # Rolling window size for hit rate calculation
    log_performance_warnings: true  # Log warnings when hit rate falls below target
    
    # Memory usage monitoring for optimization guidance
    memory_monitoring_enabled: true  # Enable memory usage tracking via psutil
    memory_warning_threshold: 0.85  # Warning threshold for memory usage (0.0-1.0)

# ============================================================================
# NAVIGATOR CONFIGURATION OVERRIDES
# ============================================================================
# Demonstrate selective parameter customization while inheriting base defaults.
# These examples show common research scenario configurations.

navigator:
  # Single-agent configuration overrides (basic research scenarios)
  # Override starting orientation - useful for systematic directional studies
  orientation: 90.0  # Start facing up instead of default (0.0 = right)
  
  # Override initial speed for non-stationary start conditions
  # Enables studies of navigation from moving initial conditions
  speed: 0.5  # Start with moderate speed instead of default (0.0)
  
  # Environment variable override for maximum speed parameter
  # Set NAVIGATOR_MAX_SPEED=2.5 for custom speed limits in experiments
  max_speed: ${oc.env:NAVIGATOR_MAX_SPEED,"1.5"}  # Increased from base default (1.0)
  
  # Advanced control parameter overrides for sophisticated navigation studies
  control:
    # Acceleration override for dynamic response studies
    acceleration: 0.15  # Increased responsiveness from base default (0.1)
    
    # Turning rate override for agility experiments
    turning_rate: 45.0  # Increased maneuverability from base default (30.0)
    
    # Sensor configuration overrides for perception studies
    sensor_range: 15.0  # Extended sensing from base default (10.0)
    sensor_noise: 0.05  # Added realistic sensor noise (base default: 0.0)
  
  # Multi-agent configuration examples (uncomment to activate)
  # These parameters override single-agent settings when positions is specified
  # positions: [[0.0, 0.0], [5.0, 0.0], [10.0, 0.0]]  # Three-agent formation
  # orientations: [0.0, 120.0, 240.0]  # Distributed orientations
  # speeds: [0.5, 0.7, 0.5]  # Varied initial speeds
  # num_agents: 3  # Multi-agent mode activation
  
  # Formation control overrides for swarm behavior studies
  formation:
    # Formation type override for systematic swarm studies
    type: "line"  # Override from base default ("grid") for linear formations
    spacing: 7.0  # Increased spacing from base default (5.0)
    maintain_formation: true  # Enable formation maintenance (base default: false)

# ============================================================================
# VIDEO PLUME CONFIGURATION OVERRIDES  
# ============================================================================
# Customize video processing parameters for specific research requirements
# with environment variable integration for deployment flexibility.

video_plume:
  # Video source with environment variable override
  # Set VIDEO_PATH=/path/to/video.mp4 for custom video sources
  video_path: ${oc.env:VIDEO_PATH,"data/videos/example_plume.mp4"}
  
  # Preprocessing overrides for specific video characteristics
  flip: true  # Override base default (false) - useful for mirrored camera setups
  
  # Gaussian smoothing overrides for noise reduction
  kernel_size: 5  # Enable smoothing (base default: 0 = disabled)
  kernel_sigma: 1.5  # Custom smoothing strength (base default: 1.0)
  
  # Threshold override for binary plume detection
  # Set PLUME_THRESHOLD=0.3 for environment-specific threshold values
  threshold: ${oc.env:PLUME_THRESHOLD,"0.4"}  # Binary detection threshold
  
  # Advanced preprocessing overrides for challenging video conditions
  preprocessing:
    # Contrast enhancement for low-contrast videos
    enhance_contrast: true  # Enable enhancement (base default: false)
    contrast_alpha: 1.2  # Increased contrast from base default (1.0)
    brightness_beta: 10.0  # Brightness adjustment from base default (0.0)
    
    # Noise reduction overrides for noisy video sources
    median_filter_size: 3  # Enable median filtering (base default: 0)
    bilateral_filter: true  # Enable edge-preserving filtering (base default: false)
  
  # Sampling configuration overrides for temporal analysis
  sampling:
    # Frame range override for focused analysis
    start_frame: 50  # Skip initial frames (base default: 0)
    end_frame: 1000  # Limit analysis range (base default: null = all frames)
    frame_skip: 2  # Process every 2nd frame for faster analysis (base default: 1)
    
    # Region of interest configuration for spatially focused studies
    roi_enabled: true  # Enable ROI processing (base default: false)
    roi_x: 100  # ROI top-left x coordinate (base default: 0)
    roi_y: 50   # ROI top-left y coordinate (base default: 0)
    roi_width: 300  # ROI width override (base default: null = full width)
    roi_height: 200  # ROI height override (base default: null = full height)

# ============================================================================
# MODULAR PLUME MODEL CONFIGURATION OVERRIDES
# ============================================================================
# Configure pluggable plume model implementations for different research
# scenarios, from fast analytical models to realistic turbulent physics.

plume_models:
  # Plume model selection with environment variable override
  # Set PLUME_MODEL_TYPE=gaussian|turbulent|video_adapter for different simulation fidelity
  type: ${oc.env:PLUME_MODEL_TYPE,"gaussian"}  # Model implementation selection
  
  # Common plume parameters applicable across all model types
  source_strength: ${oc.env:PLUME_SOURCE_STRENGTH,"1000.0"}  # Odor release rate
  source_position: [50.0, 50.0]  # Source location (x, y) coordinates
  
  # Gaussian plume model configuration (fast analytical model)
  gaussian:
    # Dispersion coefficients controlling plume spread
    dispersion_coeffs: [0.1, 0.05]  # [sigma_x, sigma_y] in spatial units
    background_concentration: 0.01  # Baseline odor concentration
    decay_rate: 0.001  # Temporal concentration decay
    
    # Advanced Gaussian parameters for research flexibility
    gaussian_kernel_size: 5  # Convolution kernel size for smoothing
    anisotropic_dispersion: false  # Enable directional dispersion differences
    
  # Turbulent plume model configuration (realistic physics simulation)
  turbulent:
    # Filament-based modeling parameters
    num_filaments: ${oc.env:TURBULENT_FILAMENTS,"500"}  # Number of odor packets
    filament_lifetime: 30.0  # Maximum filament age (seconds)
    
    # Turbulence parameters for realistic dispersion
    turbulence_intensity: 0.15  # Turbulent velocity fluctuation magnitude
    eddy_scale: 5.0  # Characteristic turbulent eddy size
    intermittency_factor: 0.7  # Spatial intermittency (0.0-1.0)
    
    # Advanced turbulent physics (optional Numba acceleration)
    enable_numba_acceleration: ${oc.env:ENABLE_NUMBA,"false"}  # JIT compilation for performance
    stochastic_transport: true  # Enable random walk transport
    
  # Video adapter configuration (existing video-based plume data)
  video_adapter:
    # Inherit video_plume configuration for backward compatibility
    inherit_video_plume_config: true  # Use existing video_plume parameters
    spatial_interpolation: "bilinear"  # Interpolation method for spatial sampling
    temporal_interpolation: "linear"  # Interpolation between video frames

# ============================================================================
# WIND FIELD DYNAMICS CONFIGURATION
# ============================================================================
# Configure environmental wind dynamics affecting plume transport and
# agent perception for realistic atmospheric simulation.

wind_fields:
  # Wind field model selection with environment variable override
  # Set WIND_FIELD_TYPE=constant|turbulent|time_varying for different dynamics
  type: ${oc.env:WIND_FIELD_TYPE,"constant"}  # Wind model implementation
  
  # Constant wind field configuration (simple directional flow)
  constant:
    # Wind velocity vector in simulation coordinates
    velocity: [2.0, 0.0]  # [u, v] wind components (m/s or spatial units/s)
    direction: 0.0  # Wind direction (degrees, 0=East, 90=North)
    speed: 2.0  # Wind speed magnitude
    
    # Vertical wind profile (optional 2.5D effects)
    enable_vertical_profile: false  # Enable height-dependent wind
    surface_roughness: 0.1  # Surface roughness parameter (m)
    
  # Turbulent wind field configuration (gusty, realistic conditions)
  turbulent:
    # Base wind parameters
    mean_velocity: [2.0, 0.3]  # Mean wind velocity components
    turbulence_intensity: [0.2, 0.15]  # Turbulence intensity [u, v] directions
    
    # Gust modeling parameters
    gust_frequency: 0.1  # Average gust frequency (Hz)
    gust_duration: 5.0  # Typical gust duration (seconds)
    max_gust_factor: 2.0  # Maximum wind speed multiplier during gusts
    
    # Spatial correlation parameters
    correlation_length: 10.0  # Spatial correlation scale (spatial units)
    temporal_correlation: 0.9  # Temporal correlation coefficient
    
  # Time-varying wind field configuration (data-driven or scheduled changes)
  time_varying:
    # Wind variation parameters
    base_wind: [1.5, 0.0]  # Base wind velocity
    variation_amplitude: [0.5, 0.3]  # Wind variation magnitude
    variation_period: 60.0  # Wind variation period (seconds)
    
    # Scheduled wind changes (optional)
    enable_wind_schedule: ${oc.env:ENABLE_WIND_SCHEDULE,"false"}  # Use scheduled changes
    wind_schedule_file: ${oc.env:WIND_SCHEDULE_PATH,"data/wind_schedule.yaml"}  # Wind schedule data

# ============================================================================
# SENSOR CONFIGURATION SYSTEMS
# ============================================================================
# Configure agent perception through pluggable sensor implementations
# supporting different sensing modalities and research requirements.

sensors:
  # Sensor type selection with environment variable override
  # Set SENSOR_TYPE=binary|concentration|gradient for different perception modes
  type: ${oc.env:SENSOR_TYPE,"concentration"}  # Primary sensor implementation
  
  # Multi-sensor configuration (enable multiple sensing modalities)
  enable_multi_sensor: ${oc.env:ENABLE_MULTI_SENSOR,"false"}  # Support multiple sensor types
  sensor_fusion_method: "concatenation"  # Options: concatenation, weighted_average, max
  
  # Binary sensor configuration (threshold-based detection)
  binary:
    # Detection threshold parameters
    detection_threshold: ${oc.env:BINARY_THRESHOLD,"0.1"}  # Odor detection threshold
    hysteresis: 0.02  # Hysteresis band to prevent oscillation
    
    # Noise modeling for realistic sensor behavior
    false_positive_rate: 0.05  # Probability of false positive detection
    false_negative_rate: 0.03  # Probability of false negative (miss)
    
    # Response characteristics
    response_time: 0.1  # Sensor response time (seconds)
    recovery_time: 0.5  # Time to clear detection after odor removal
    
  # Concentration sensor configuration (quantitative measurement)
  concentration:
    # Measurement range and precision
    dynamic_range: [0.0, 1.0]  # [min, max] measurable concentrations
    resolution: 0.001  # Measurement precision
    saturation_level: 0.95  # Saturation threshold (fraction of max range)
    
    # Noise and calibration parameters
    measurement_noise: ${oc.env:CONCENTRATION_NOISE,"0.02"}  # Additive noise std dev
    calibration_drift: 0.001  # Long-term calibration drift rate
    
    # Temporal filtering for realistic sensor dynamics
    temporal_filtering: true  # Enable temporal response filtering
    filter_time_constant: 0.2  # First-order filter time constant
    
  # Gradient sensor configuration (directional navigation cues)
  gradient:
    # Spatial differentiation parameters
    spatial_resolution: [0.5, 0.5]  # [dx, dy] finite difference spacing
    finite_difference_method: "central"  # Options: forward, backward, central
    differentiation_order: 2  # Finite difference accuracy order
    
    # Multi-point sampling configuration
    sampling_points: 4  # Number of points for gradient computation
    sampling_radius: 1.0  # Radius for multi-point sampling
    
    # Gradient filtering and processing
    enable_gradient_smoothing: true  # Apply smoothing to computed gradients
    smoothing_kernel_size: 3  # Spatial smoothing kernel size
    min_gradient_magnitude: 0.001  # Minimum reportable gradient magnitude
    
    # Advanced gradient features
    compute_higher_derivatives: false  # Enable Hessian matrix computation
    normalize_gradients: true  # Normalize gradient vectors to unit magnitude

# ============================================================================
# SIMULATION EXECUTION OVERRIDES
# ============================================================================
# Customize simulation behavior for specific research scenarios and
# performance requirements.

simulation:
  # Temporal parameter overrides for different experiment durations
  max_duration: 180.0  # Reduced from base default (300.0) for shorter experiments
  fps: 60  # Increased from base default (30) for higher temporal resolution
  
  # Real-time execution overrides for development vs production
  real_time: ${oc.env:REAL_TIME_SIM,"false"}  # Disable real-time for faster analysis
  speed_multiplier: 2.0  # 2x speed for rapid prototyping (base default: 1.0)
  
  # Initialization overrides for systematic studies
  initialization:
    auto_start: true  # Maintain automatic startup (base default: true)
    warmup_frames: 10  # Add system warmup period (base default: 0)
    random_start_positions: true  # Enable randomized starts (base default: false)
    
    # World parameter overrides for custom environments
    coordinate_system: "cartesian"  # Override from base default ("image")
  
  # Data recording configuration for comprehensive analysis
  recording:
    enabled: true  # Ensure data recording is active (base default: true)
    save_trajectories: true  # Record position data (base default: true)
    save_sensor_data: true  # Record odor measurements (base default: true)
    save_metadata: true  # Record experiment metadata (base default: true)
    
    # Export format overrides for analysis pipeline integration
    export_format: "hdf5"  # More efficient than base default ("numpy")
    compression: "gzip"  # Enable compression (base default: null)
    precision: "float32"  # Maintain precision (base default: "float32")
    
    # Recording frequency override for data management
    recording_frequency: 2  # Record every 2nd frame to reduce data volume

# ============================================================================
# VISUALIZATION CONFIGURATION OVERRIDES
# ============================================================================
# Customize visualization behavior for different presentation and analysis needs.

visualization:
  # Real-time animation overrides for development and presentation
  animation:
    enabled: true  # Enable real-time visualization (base default: false)
    fps: 30  # Match base default (30) for smooth animation
    real_time: false  # Disable real-time sync for faster processing
    
    # Display feature overrides for comprehensive visualization
    show_trails: true  # Show trajectory history (base default: true)
    trail_length: 75  # Extended trail from base default (50)
    show_sensors: true  # Display sensor ranges (base default: false)
    show_plume_overlay: true  # Overlay plume data (base default: true)
    
    # Animation export overrides for publication and sharing
    save_animation: ${oc.env:SAVE_ANIMATIONS,"false"}  # Control via environment
    animation_format: "mp4"  # High-quality format (base default: "mp4")
    animation_quality: "high"  # Maximum quality (base default: "high")
  
  # Static plot configuration for publication-quality outputs
  plotting:
    # Figure dimension overrides for publication requirements
    figure_size: [14, 10]  # Larger than base default [12, 8]
    dpi: 300  # Publication quality DPI (base default: 150)
    
    # Color scheme override for accessibility and aesthetics
    color_scheme: "plasma"  # Alternative to base default ("viridis")
    background_color: "white"  # Maintain clean background (base default: "white")
    
    # Font and text overrides for presentation
    font_size: 14  # Increased from base default (12)
    title_size: 18  # Increased from base default (16)
    
    # Trajectory visualization overrides
    trajectory_style: "both"  # Show lines and markers (base default: "line")
    trajectory_width: 2.5  # Thicker lines from base default (2.0)
    marker_size: 10  # Larger markers from base default (8)

# ============================================================================
# LOGGING AND DEBUGGING OVERRIDES
# ============================================================================
# Customize logging behavior for development, testing, and production scenarios.

logging:
  # Core logging level override with environment variable support
  # Set LOG_LEVEL=DEBUG for detailed debugging information
  level: ${oc.env:LOG_LEVEL,"INFO"}  # Maintain info level (base default: "INFO")
  
  # Output destination overrides for different deployment scenarios
  console_enabled: true  # Keep console output (base default: true)
  file_enabled: ${oc.env:LOG_TO_FILE,"true"}  # Enable file logging via environment
  file_path: ${oc.env:LOG_FILE_PATH,"logs/odor_plume_nav_user.log"}  # Custom log path
  
  # Structured logging configuration for machine-parseable output
  # Set LOG_JSON_SINK=true to enable JSON-formatted logging for production
  json_sink_enabled: ${oc.env:LOG_JSON_SINK,"false"}  # Enable structured JSON logging
  json_sink_path: ${oc.env:LOG_JSON_PATH,"logs/odor_plume_nav_structured.jsonl"}  # JSON log location
  
  # File management overrides for production deployments
  file_rotation: "5 MB"  # Smaller rotation from base default ("10 MB")
  file_retention: "2 weeks"  # Extended retention from base default ("1 week")
  
  # Performance monitoring overrides for development optimization
  performance:
    enabled: true  # Enable performance tracking (base default: false)
    timing_precision: "milliseconds"  # Maintain precision (base default: "milliseconds")
    memory_tracking: true  # Enable memory monitoring (base default: false)
    slow_operation_threshold: 0.5  # More sensitive than base default (1.0)
  
  # Component-specific logging level overrides
  components:
    navigator: "DEBUG"  # Detailed navigation logging (base default: "INFO")
    video_plume: "INFO"  # Standard video processing (base default: "INFO")
    visualization: "WARNING"  # Quiet visualization (base default: "ERROR")

# ============================================================================
# REPRODUCIBILITY AND EXPERIMENT MANAGEMENT
# ============================================================================
# Configure deterministic behavior and experiment tracking for research reproducibility.

reproducibility:
  # Seed management with environment variable support
  # Set RANDOM_SEED=42 for deterministic experiments
  global_seed: ${oc.env:RANDOM_SEED,null}  # Use environment or random seed
  
  # Enhanced seed logging for experiment tracking
  auto_seed: true  # Generate seeds automatically (base default: true)
  seed_logging: true  # Log all seeds used (base default: true)
  
  # Deterministic behavior overrides for rigorous research
  deterministic:
    strict_mode: true  # Enable strict determinism (base default: false)
    validate_reproducibility: true  # Verify reproducibility (base default: false)
    hash_verification: true  # Generate result hashes (base default: false)

# ============================================================================
# PERFORMANCE OPTIMIZATION OVERRIDES
# ============================================================================
# Customize system performance for different computational environments.

performance:
  # NumPy optimization overrides for computational efficiency
  numpy:
    # CPU thread override with environment variable support
    # Set NUMPY_THREADS=8 for multi-core optimization
    thread_count: ${oc.env:NUMPY_THREADS,"0"}  # 0 = auto-detect (base default: 0)
    memory_policy: "optimal"  # Maintain optimal setting (base default: "optimal")
    precision: "float64"  # High precision (base default: "float64")
  
  # OpenCV performance overrides for video processing optimization
  opencv:
    thread_count: 6  # Increased from base default (4)
    use_opencl: ${oc.env:OPENCV_OPENCL,"false"}  # GPU acceleration via environment
    memory_limit: 1024  # Increased from base default (512 MB)
  
  # Matplotlib performance overrides for visualization efficiency
  matplotlib:
    # Backend selection with environment override
    # Set MATPLOTLIB_BACKEND=Qt5Agg for interactive development
    backend: ${oc.env:MATPLOTLIB_BACKEND,"Agg"}  # Headless by default
    interactive: ${oc.env:MATPLOTLIB_INTERACTIVE,"false"}  # Interactive mode control
    figure_cache_size: 15  # Increased from base default (10)

# ============================================================================
# DATABASE AND PERSISTENCE OVERRIDES (FUTURE EXTENSIBILITY)
# ============================================================================
# Configure optional database features for trajectory storage and metadata persistence.

database:
  # Database enablement with environment control
  # Set ENABLE_DATABASE=true to activate persistence features
  enabled: ${oc.env:ENABLE_DATABASE,"false"}  # Disabled by default
  
  # Database connection with secure environment variable integration
  # Set DATABASE_URL=postgresql://user:pass@host:port/db for production
  url: ${oc.env:DATABASE_URL,"sqlite:///experiments.db"}  # Local SQLite default
  
  # Connection pool overrides for production deployments
  pool_size: ${oc.env:DB_POOL_SIZE,"3"}  # Reduced from base default ("5")
  max_overflow: ${oc.env:DB_MAX_OVERFLOW,"5"}  # Reduced from base default ("10")
  
  # Schema management overrides for development workflows
  schema:
    create_tables: true  # Auto-create tables (base default: true)
    drop_existing: false  # Preserve existing data (base default: false)
    table_prefix: "exp_"  # Custom prefix override (base default: "opn_")

# ============================================================================
# EXPERIMENTAL FEATURES AND ADVANCED CONFIGURATION
# ============================================================================
# Enable experimental capabilities and advanced features for cutting-edge research.

experimental:
  # Plugin system overrides for extensibility research
  plugins:
    enabled: ${oc.env:ENABLE_PLUGINS,"false"}  # Control via environment
    auto_discovery: true  # Maintain auto-discovery (base default: true)
    safe_mode: false  # Disable safe mode for development (base default: true)
  
  # Machine learning integration overrides for AI research
  ml_integration:
    enabled: ${oc.env:ENABLE_ML,"false"}  # Control via environment variable
    frameworks: ["pytorch"]  # Override empty base default
    inference_mode: ${oc.env:ML_DEVICE,"cpu"}  # GPU control via environment
  
  # Feature flags for experimental research capabilities
  features:
    neural_navigation: ${oc.env:NEURAL_NAV,"false"}  # Neural network navigation
    adaptive_sampling: ${oc.env:ADAPTIVE_SAMPLING,"false"}  # Adaptive sensor sampling
    collaborative_agents: ${oc.env:COLLABORATIVE,"false"}  # Multi-agent collaboration
    real_time_optimization: ${oc.env:REAL_TIME_OPT,"false"}  # Dynamic optimization

# ============================================================================
# HYDRA RUNTIME CONFIGURATION OVERRIDES
# ============================================================================
# Customize Hydra's execution behavior for different research workflows.

hydra:
  # Output directory management with environment variable support
  run:
    # Custom output directory with timestamp and parameter tracking
    dir: ${oc.env:HYDRA_OUTPUT_DIR,"outputs/experiments"}/${now:%Y-%m-%d_%H-%M-%S}
  
  # Multi-run experiment configuration for parameter sweeps
  sweep:
    # Organized multi-run output with experiment grouping
    dir: ${oc.env:HYDRA_MULTIRUN_DIR,"outputs/multirun"}/${now:%Y-%m-%d_%H-%M-%S}
    subdir: run_${hydra:job.num}_${hydra:job.override_dirname}
  
  # Job configuration with descriptive naming for experiment tracking
  job:
    # Dynamic job naming based on key parameters
    name: ${oc.env:EXPERIMENT_NAME,"plume_nav"}_${hydra:runtime.choices.navigator,single}_s${navigator.max_speed}_f${simulation.fps}
    chdir: false  # Maintain working directory stability (base default: false)

# ============================================================================
# CONFIGURATION EXAMPLES AND TEMPLATES
# ============================================================================
# The following examples demonstrate common research scenarios using the new
# modular architecture. Uncomment and modify for specific experiments.

# Example 1: Fast Analytical Plume with Memory-Less Agent Study
# Uncomment for rapid prototyping with simple Gaussian plume physics
# plume_models:
#   type: "gaussian"
#   gaussian:
#     dispersion_coeffs: [0.15, 0.08]
#     source_strength: 500.0
# wind_fields:
#   type: "constant"
#   constant:
#     velocity: [1.5, 0.0]
# sensors:
#   type: "binary"
#   binary:
#     detection_threshold: 0.2
#     false_positive_rate: 0.02

# Example 2: Realistic Turbulent Plume with Memory-Based Navigation
# Uncomment for high-fidelity research with complex environmental dynamics
# plume_models:
#   type: "turbulent"
#   turbulent:
#     num_filaments: 1000
#     turbulence_intensity: 0.2
#     enable_numba_acceleration: true
# wind_fields:
#   type: "turbulent"
#   turbulent:
#     mean_velocity: [2.5, 0.5]
#     turbulence_intensity: [0.25, 0.18]
#     gust_frequency: 0.15
# sensors:
#   type: "gradient"
#   enable_multi_sensor: true
#   gradient:
#     spatial_resolution: [0.3, 0.3]
#     compute_higher_derivatives: true

# Example 3: Multi-Sensor Perception Study
# Uncomment for research on sensor fusion and multi-modal perception
# sensors:
#   enable_multi_sensor: true
#   sensor_fusion_method: "weighted_average"
#   concentration:
#     dynamic_range: [0.0, 2.0]
#     measurement_noise: 0.05
#   binary:
#     detection_threshold: 0.15
#     hysteresis: 0.03
#   gradient:
#     spatial_resolution: [0.4, 0.4]
#     normalize_gradients: true

# Example 4: Video-Based Plume with Environmental Dynamics
# Uncomment for experiments using real plume data with synthetic wind
# plume_models:
#   type: "video_adapter"
#   video_adapter:
#     spatial_interpolation: "cubic"
#     temporal_interpolation: "linear"
# wind_fields:
#   type: "time_varying"
#   time_varying:
#     base_wind: [1.8, 0.2]
#     variation_amplitude: [0.8, 0.4]
#     variation_period: 45.0

# Example 5: High-Performance Multi-Agent Swarm Study
# Uncomment to activate comprehensive multi-agent navigation research
# navigator:
#   positions: [[0.0, 0.0], [10.0, 0.0], [20.0, 0.0], [30.0, 0.0], [40.0, 0.0]]
#   orientations: [0.0, 45.0, 90.0, 135.0, 180.0]
#   speeds: [0.5, 0.7, 0.9, 0.7, 0.5]
#   max_speeds: [2.0, 2.0, 2.0, 2.0, 2.0]
#   num_agents: 5
#   formation:
#     type: "line"
#     spacing: 10.0
#     maintain_formation: true
#     communication_range: 25.0

# Example 2: High-Resolution Video Analysis Configuration
# Uncomment for detailed video processing with advanced preprocessing
# video_plume:
#   video_path: ${oc.env:HIGH_RES_VIDEO,"data/videos/high_resolution_plume.mp4"}
#   preprocessing:
#     enhance_contrast: true
#     contrast_alpha: 1.3
#     bilateral_filter: true
#     bilateral_d: 9
#     morphology_enabled: true
#     morphology_operation: "opening"
#     morphology_kernel_size: 5
#   sampling:
#     frame_skip: 1  # Process all frames for maximum detail
#     temporal_window: 3  # 3-frame temporal averaging

# Example 3: Publication-Quality Visualization Configuration
# Uncomment for generating publication-ready figures and animations
# visualization:
#   animation:
#     enabled: true
#     save_animation: true
#     animation_format: "mp4"
#     animation_quality: "lossless"
#   plotting:
#     figure_size: [16, 12]
#     dpi: 600  # Ultra-high resolution for publications
#     color_scheme: "viridis"
#     font_family: "serif"
#     font_size: 16
#     title_size: 20

# Example 4: High-Performance Frame Caching Configuration
# Uncomment for accelerated RL training with optimized frame caching
# frame_cache:
#   mode: "lru"  # Intelligent LRU caching for memory efficiency
#   memory_limit_mb: 4096  # 4 GiB cache for large-scale experiments
#   lru:
#     preload_sequential: true
#     preload_count: 20  # Aggressive preloading for sequential access
#     memory_pressure_threshold: 0.95  # Higher memory utilization
#   monitoring:
#     target_hit_rate: 0.95  # Higher performance target for production
#     log_performance_warnings: true
#     memory_monitoring_enabled: true

# Example 5: Maximum Performance Full-Preload Configuration
# Uncomment for maximum throughput when memory permits
# frame_cache:
#   mode: "all"  # Full video preload for zero frame I/O latency
#   memory_limit_mb: 8192  # 8 GiB cache limit for large videos
#   preload_all:
#     warm_on_reset: true  # Preload during environment initialization
#     max_video_size_mb: 16384  # Support very large video files
#     memory_check_enabled: true  # Verify system memory availability
#     fallback_to_lru: true  # Graceful degradation if insufficient memory
#   monitoring:
#     target_hit_rate: 0.99  # Near-perfect hit rate expected
#     collect_statistics: true

# Example 6: Production Database Integration
# Uncomment for full database persistence in production environments
# database:
#   enabled: true
#   url: ${oc.env:DATABASE_URL,"postgresql://user:password@localhost:5432/plume_nav"}
#   pool_size: 10
#   max_overflow: 20
#   schema:
#     create_tables: true
#     table_prefix: "prod_"
#     retention_days: 365
#     auto_cleanup: true

# ============================================================================
# ENVIRONMENT VARIABLE REFERENCE
# ============================================================================
# The following environment variables are supported for deployment flexibility:
#
# General Configuration:
#   ENVIRONMENT_TYPE      - deployment environment (development|testing|production)
#   DEBUG                 - enable debug mode (true|false)
#   VERBOSE               - enable verbose output (true|false)
#   PLATFORM              - target platform (auto|linux|windows|macos)
#
# Paths and Storage:
#   DATA_DIR              - base data directory path
#   OUTPUT_DIR            - simulation output directory path
#   VIDEO_DIR             - video file directory path
#   VIDEO_PATH            - specific video file path
#   LOG_FILE_PATH         - custom log file location
#
# Navigation Parameters:
#   NAVIGATOR_MAX_SPEED   - maximum agent speed override
#   RANDOM_SEED           - deterministic experiment seed
#
# Video Processing:
#   PLUME_THRESHOLD       - binary detection threshold value
#
# Modular Architecture - Component Selection:
#   PLUME_MODEL_TYPE      - plume model implementation (gaussian|turbulent|video_adapter)
#                          gaussian: fast analytical dispersion model
#                          turbulent: realistic filament-based physics
#                          video_adapter: backward-compatible video processing
#   WIND_FIELD_TYPE       - wind dynamics model (constant|turbulent|time_varying)
#                          constant: uniform directional flow
#                          turbulent: gusty atmospheric conditions
#                          time_varying: scheduled or periodic wind changes
#   SENSOR_TYPE           - primary sensor implementation (binary|concentration|gradient)
#                          binary: threshold-based odor detection
#                          concentration: quantitative measurement
#                          gradient: directional navigation cues
#
# Plume Model Configuration:
#   PLUME_SOURCE_STRENGTH - odor release rate for analytical models (default: 1000.0)
#   TURBULENT_FILAMENTS   - number of filaments for turbulent model (default: 500)
#   ENABLE_NUMBA          - JIT acceleration for turbulent physics (true|false)
#
# Sensor Configuration:
#   ENABLE_MULTI_SENSOR   - enable multiple sensor modalities (true|false)
#   BINARY_THRESHOLD      - binary sensor detection threshold (default: 0.1)
#   CONCENTRATION_NOISE   - concentration sensor noise level (default: 0.02)
#
# Wind Field Configuration:
#   ENABLE_WIND_SCHEDULE  - use scheduled wind changes (true|false)
#   WIND_SCHEDULE_PATH    - path to wind schedule data file
#
# Frame Caching (Gymnasium Migration Enhanced):
#   FRAME_CACHE_MODE      - cache strategy (none|lru|all)
#                          none: memoryless flavor, minimal memory usage
#                          lru: intelligent caching with eviction policy  
#                          all: full preload for maximum performance
#   FRAME_CACHE_SIZE_MB   - cache memory limit in megabytes (default: 2048)
#                          automatically enforced per Section 0.3.1 requirements
#
# Structured Logging:
#   LOG_JSON_SINK         - enable JSON logging (true|false)
#   LOG_JSON_PATH         - JSON log file location
#
# Performance and System:
#   NUMPY_THREADS         - NumPy thread count for optimization
#   OPENCV_OPENCL         - enable OpenCV GPU acceleration (true|false)
#   MATPLOTLIB_BACKEND    - matplotlib rendering backend
#   MATPLOTLIB_INTERACTIVE - enable interactive plotting (true|false)
#
# Database and Persistence:
#   ENABLE_DATABASE       - activate database features (true|false)
#   DATABASE_URL          - database connection string
#   DB_POOL_SIZE          - connection pool size
#   DB_MAX_OVERFLOW       - maximum pool overflow
#
# Experimental Features:
#   ENABLE_PLUGINS        - activate plugin system (true|false)
#   ENABLE_ML             - enable ML integration (true|false)
#   ML_DEVICE             - ML inference device (cpu|gpu|auto)
#   NEURAL_NAV            - enable neural navigation (true|false)
#   ADAPTIVE_SAMPLING     - enable adaptive sampling (true|false)
#   COLLABORATIVE         - enable collaborative agents (true|false)
#   REAL_TIME_OPT         - enable real-time optimization (true|false)
#
# Hydra and Execution:
#   HYDRA_OUTPUT_DIR      - Hydra output directory override
#   HYDRA_MULTIRUN_DIR    - multi-run experiment directory
#   EXPERIMENT_NAME       - custom experiment naming
#   REAL_TIME_SIM         - real-time simulation mode (true|false)
#   SAVE_ANIMATIONS       - save animation outputs (true|false)
#   LOG_LEVEL             - logging verbosity (DEBUG|INFO|WARNING|ERROR)
#   LOG_TO_FILE           - enable file logging (true|false)
#
# Usage Instructions:
#   1. Create a .env file in your project root with desired variables
#   2. Set system environment variables for production deployments  
#   3. Use Hydra CLI overrides for dynamic parameter modification
#   4. Combine environment variables with CLI overrides for maximum flexibility
#
# Example .env file (Traditional Configuration):
#   ENVIRONMENT_TYPE=production
#   DEBUG=false
#   DATABASE_URL=postgresql://user:pass@host:port/db
#   NUMPY_THREADS=8
#   VIDEO_PATH=/data/experiments/plume_video.mp4
#   RANDOM_SEED=42
#   
#   # Frame cache configuration for Gymnasium migration
#   FRAME_CACHE_MODE=lru              # Use LRU caching (memory flavor)
#   FRAME_CACHE_SIZE_MB=4096          # 4 GiB cache limit for large experiments
#   # FRAME_CACHE_MODE=none           # Alternative: memoryless flavor
#   # FRAME_CACHE_SIZE_MB=0           # Alternative: minimal memory usage
#   
#   LOG_JSON_SINK=true
#
# Example .env file (Modular Architecture - Fast Research):
#   ENVIRONMENT_TYPE=development
#   DEBUG=true
#   
#   # Fast analytical simulation configuration
#   PLUME_MODEL_TYPE=gaussian         # Simple Gaussian dispersion model
#   WIND_FIELD_TYPE=constant          # Uniform wind field
#   SENSOR_TYPE=binary                # Threshold-based detection
#   
#   # Plume configuration
#   PLUME_SOURCE_STRENGTH=750.0       # Moderate source strength
#   BINARY_THRESHOLD=0.15             # Sensitive detection threshold
#   
#   # Performance optimization
#   FRAME_CACHE_MODE=lru
#   NUMPY_THREADS=4
#   
# Example .env file (Modular Architecture - High-Fidelity Research):
#   ENVIRONMENT_TYPE=production
#   DEBUG=false
#   
#   # Realistic turbulent simulation configuration
#   PLUME_MODEL_TYPE=turbulent        # Filament-based turbulent physics
#   WIND_FIELD_TYPE=turbulent         # Gusty atmospheric conditions
#   SENSOR_TYPE=gradient              # Directional navigation cues
#   
#   # Advanced turbulent physics
#   TURBULENT_FILAMENTS=1500          # High-resolution filament field
#   ENABLE_NUMBA=true                 # JIT acceleration for performance
#   
#   # Multi-sensor perception
#   ENABLE_MULTI_SENSOR=true          # Enable sensor fusion
#   CONCENTRATION_NOISE=0.025         # Realistic sensor noise
#   
#   # High-performance caching
#   FRAME_CACHE_MODE=lru
#   FRAME_CACHE_SIZE_MB=8192          # 8 GiB for complex simulations
#   NUMPY_THREADS=16                  # Multi-core optimization
#   
#   # Structured logging for analysis
#   LOG_JSON_SINK=true
#   LOG_LEVEL=INFO
#
# ============================================================================
# MODULAR ARCHITECTURE SUMMARY
# ============================================================================
# The enhanced configuration system supports pluggable components enabling
# configuration-driven switching between simulation approaches without code changes.
#
# Key Modular Components:
#   1. Plume Models: Switch between analytical (gaussian), realistic (turbulent), 
#      and video-based (video_adapter) odor dispersion physics
#   2. Wind Fields: Configure environmental dynamics from simple (constant) to 
#      complex (turbulent) atmospheric conditions
#   3. Sensors: Support different perception modalities (binary, concentration, gradient)
#      with optional multi-sensor fusion capabilities
#
# Configuration-Driven Research Scenarios:
#   - Memory vs Memoryless Agent Studies: Use simple models for memoryless agents,
#     complex physics for memory-based navigation strategies
#   - Sensor Fusion Research: Enable multiple sensors simultaneously and configure
#     fusion methods (concatenation, weighted_average, max)
#   - Environmental Realism Studies: Switch from analytical models to turbulent
#     physics with realistic wind dynamics for varying fidelity levels
#   - Performance vs Accuracy Trade-offs: Use environment variables to select
#     fast analytical models for prototyping, realistic physics for final experiments
#
# Benefits of Modular Architecture:
#   - No code changes required to switch between simulation approaches
#   - Environment variable control enables automated parameter sweeps
#   - Backward compatibility with existing video-based workflows
#   - Configurable complexity scaling from simple (sub-ms steps) to realistic (research-grade)
#   - Multi-run experiments comparing different component combinations
#
# Research Example Workflows:
#   1. Rapid Prototyping: gaussian plume + constant wind + binary sensor
#   2. Algorithm Validation: turbulent plume + turbulent wind + gradient sensor  
#   3. Sensor Studies: any plume + any wind + multi-sensor configuration
#   4. Comparative Analysis: multirun with different component combinations
#
# ============================================================================
# END OF USER CONFIGURATION
# ============================================================================
# This configuration demonstrates comprehensive Hydra composition patterns
# while providing practical templates for research workflows. All parameters
# can be overridden through CLI arguments, environment variables, or local
# configuration files for maximum deployment flexibility.
#
# For additional configuration examples and advanced usage patterns, see:
#   - conf/base.yaml for foundational system defaults
#   - conf/local/ directory for environment-specific templates
#   - Technical specification sections 3.2, 5.2, and 7.2
#   - src/odor_plume_nav/config/schemas.py for validation schemas
#
# CLI Override Examples:
#   python -m odor_plume_nav.cli.main navigator.max_speed=2.0 simulation.fps=60
#   python -m odor_plume_nav.cli.main --multirun navigator.speed=0.5,1.0,1.5
#   python -m odor_plume_nav.cli.main video_plume.kernel_size=5 +environment=production
#   
#   # Modular architecture configuration examples (NEW)
#   python -m odor_plume_nav.cli.main plume_models=gaussian wind_fields=constant sensors=binary
#   python -m odor_plume_nav.cli.main plume_models=turbulent sensors=gradient
#   python -m odor_plume_nav.cli.main plume_models.type=video_adapter wind_fields.type=turbulent
#   
#   # Multi-run experiments with different component combinations
#   python -m odor_plume_nav.cli.main --multirun plume_models=gaussian,turbulent sensors=binary,concentration
#   python -m odor_plume_nav.cli.main --multirun wind_fields=constant,turbulent,time_varying
#   python -m odor_plume_nav.cli.main --multirun plume_models=gaussian plume_models.gaussian.dispersion_coeffs="[0.1,0.05],[0.2,0.1]"
#   
#   # Memory-based vs memoryless agent comparison with modular components
#   python -m odor_plume_nav.cli.main plume_models=gaussian sensors=concentration  # Memoryless compatible
#   python -m odor_plume_nav.cli.main plume_models=turbulent sensors=gradient     # Memory-enabled navigation
#   
#   # Frame cache configuration with environment flavors (Gymnasium migration)
#   python -m odor_plume_nav.cli.main frame_cache.mode=lru frame_cache.memory_limit_mb=4096
#   python -m odor_plume_nav.cli.main frame_cache.mode=all logging.json_sink_enabled=true
#   python -m odor_plume_nav.cli.main frame_cache.mode=none  # Memoryless operation
#   python -m odor_plume_nav.cli.main --multirun frame_cache.mode=none,lru,all
#   
#   # Environment flavor integration with frame cache
#   python -m odor_plume_nav.cli.main +env/flavors=memoryless  # Minimal memory usage
#   python -m odor_plume_nav.cli.main +env/flavors=memory     # Optimized caching
#   python -m odor_plume_nav.cli.main +env/flavors=memory frame_cache.mode=all
#   
#   # Advanced modular component configuration examples
#   python -m odor_plume_nav.cli.main plume_models=turbulent plume_models.turbulent.num_filaments=1000
#   python -m odor_plume_nav.cli.main sensors=gradient sensors.gradient.spatial_resolution="[0.3,0.3]"
#   python -m odor_plume_nav.cli.main wind_fields=turbulent wind_fields.turbulent.gust_frequency=0.2
#
# Compose API Examples:
#   from hydra import compose, initialize
#   with initialize(config_path="../conf"):
#       cfg = compose(config_name="config", overrides=["navigator.max_speed=3.0"])
#
# Environment Integration:
#   export ENVIRONMENT_TYPE=production
#   export DATABASE_URL=postgresql://localhost/experiments
#   export FRAME_CACHE_MODE=lru
#   export FRAME_CACHE_SIZE_MB=4096
#   export LOG_JSON_SINK=true
#   python -m odor_plume_nav.cli.main
#
# Modular Architecture Environment Integration:
#   # Fast analytical simulation for rapid prototyping
#   export PLUME_MODEL_TYPE=gaussian
#   export WIND_FIELD_TYPE=constant
#   export SENSOR_TYPE=binary
#   python -m odor_plume_nav.cli.main
#   
#   # High-fidelity turbulent simulation for research
#   export PLUME_MODEL_TYPE=turbulent
#   export WIND_FIELD_TYPE=turbulent
#   export SENSOR_TYPE=gradient
#   export TURBULENT_FILAMENTS=1000
#   export ENABLE_NUMBA=true
#   python -m odor_plume_nav.cli.main
#   
#   # Multi-sensor perception study
#   export SENSOR_TYPE=concentration
#   export ENABLE_MULTI_SENSOR=true
#   export CONCENTRATION_NOISE=0.03
#   python -m odor_plume_nav.cli.main sensors=gradient +sensors=binary
#   
#   # Video-based plume with dynamic wind
#   export PLUME_MODEL_TYPE=video_adapter
#   export WIND_FIELD_TYPE=time_varying
#   export ENABLE_WIND_SCHEDULE=true
#   export VIDEO_PATH=/data/experiments/realistic_plume.mp4
#   python -m odor_plume_nav.cli.main
# ============================================================================