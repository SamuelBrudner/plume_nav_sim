name: 'Publish Package'

# Trigger configuration for comprehensive publishing automation
on:
  # Semantic version tags including pre-release versions
  push:
    tags:
      - 'v*.*.*'          # Stable releases (v1.0.0, v2.1.3)
      - 'v*.*.*-alpha.*'  # Alpha releases (v1.0.0-alpha.1)
      - 'v*.*.*-beta.*'   # Beta releases (v1.0.0-beta.1)
      - 'v*.*.*-rc.*'     # Release candidates (v1.0.0-rc.1)

  # GitHub release publication and edits
  release:
    types: [published, edited]

  # Manual workflow dispatch with comprehensive options
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0, 1.0.0-alpha.1)'
        required: true
        type: string

      publish_to_pypi:
        description: 'Publish to PyPI (disabled for proof-of-life)'
        required: false
        default: false
        type: boolean

      publish_to_test_pypi:
        description: 'Publish to Test PyPI'
        required: false
        default: false
        type: boolean

      create_github_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean

      run_full_test_suite:
        description: 'Run complete test suite before publishing'
        required: false
        default: true
        type: boolean

      enable_security_scanning:
        description: 'Enable security scanning and vulnerability assessment'
        required: false
        default: true
        type: boolean

# Concurrency control to prevent conflicting publication workflows
concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: false  # Do not cancel in-progress publications

# Comprehensive permissions for package publishing and release management
permissions:
  contents: write    # Create releases and upload assets
  packages: write    # Publish to GitHub Packages
  id-token: write    # OIDC trusted publishing for PyPI
  actions: read      # Read workflow artifacts
  checks: write      # Update check status

# Environment variables for consistent configuration
env:
  PYTHONUNBUFFERED: '1'
  FORCE_COLOR: '1'
  PIP_NO_COLOR: '1'
  PIP_DISABLE_PIP_VERSION_CHECK: '1'
  HATCH_BUILD_CLEAN: 'true'
  PACKAGE_NAME: 'plume-nav-sim'
  BUILD_BACKEND: 'hatchling.build'

jobs:
  # ============================================================================
  # VALIDATION AND RELEASE INFORMATION EXTRACTION
  # ============================================================================
  validate-release:
    name: 'Validate Release Information'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      is-prerelease: ${{ steps.extract-version.outputs.prerelease }}
      release-type: ${{ steps.extract-version.outputs.release_type }}
      should-publish: ${{ steps.validate-inputs.outputs.should_publish }}

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4  # v4 - Repository checkout with full history
        with:
          fetch-depth: 0  # Full history for comprehensive package building
          submodules: false

      - name: 'Extract version information'
        id: extract-version
        run: |
          #!/bin/bash
          set -euo pipefail

          # Extract version from tag or workflow input
          if [[ '${{ github.event_name }}' == 'workflow_dispatch' ]]; then
              VERSION='${{ github.event.inputs.version }}'
              echo "Using workflow dispatch version: $VERSION"
          elif [[ '${{ github.ref_type }}' == 'tag' ]]; then
              VERSION=${GITHUB_REF#refs/tags/v}
              echo "Using tag version: $VERSION"
          else
              echo "Error: Cannot determine version for release"
              exit 1
          fi

          # Validate semantic versioning format
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-(alpha|beta|rc)\.[0-9]+)?$ ]]; then
              echo "Error: Invalid semantic version format: $VERSION"
              echo "Expected format: X.Y.Z or X.Y.Z-{alpha|beta|rc}.N"
              exit 1
          fi

          # Determine release type
          if [[ $VERSION =~ -(alpha|beta|rc) ]]; then
              IS_PRERELEASE=true
              RELEASE_TYPE=${BASH_REMATCH[1]}
          else
              IS_PRERELEASE=false
              RELEASE_TYPE=stable
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT

          echo "=== Release Information ==="
          echo "Version: $VERSION"
          echo "Pre-release: $IS_PRERELEASE"
          echo "Release type: $RELEASE_TYPE"
          echo "========================="

      - name: 'Validate release inputs and configuration'
        id: validate-inputs
        run: |
          #!/bin/bash
          set -euo pipefail

          SHOULD_PUBLISH=false

          # Validate PyPI publishing configuration
          if [[ '${{ github.event.inputs.publish_to_pypi }}' == 'true' ]]; then
              echo "‚ö†Ô∏è PyPI publishing is disabled for proof-of-life implementation"
              echo "This would require PyPI API tokens and production readiness"
              SHOULD_PUBLISH=false
          elif [[ '${{ github.event.inputs.publish_to_test_pypi }}' == 'true' ]]; then
              echo "‚úÖ Test PyPI publishing enabled (future implementation)"
              SHOULD_PUBLISH=true
          else
              echo "üì¶ GitHub release only (current proof-of-life scope)"
              SHOULD_PUBLISH=true
          fi

          # Validate version in pyproject.toml matches release version
          PROJECT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          RELEASE_VERSION='${{ steps.extract-version.outputs.version }}'

          echo "Project version: $PROJECT_VERSION"
          echo "Release version: $RELEASE_VERSION"

          if [[ "$PROJECT_VERSION" != "$RELEASE_VERSION" ]]; then
              echo "‚ö†Ô∏è Version mismatch detected - will update pyproject.toml"
              echo "This is expected for automated releases"
          fi

          echo "should_publish=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT

          echo "=== Validation Summary ==="
          echo "Should publish: $SHOULD_PUBLISH"
          echo "========================="

      - name: 'Generate release summary'
        run: |
          echo "## üìã Release Validation Summary"
          echo ""
          echo "- **Version**: ${{ steps.extract-version.outputs.version }}"
          echo "- **Type**: ${{ steps.extract-version.outputs.release_type }}"
          echo "- **Pre-release**: ${{ steps.extract-version.outputs.prerelease }}"
          echo "- **Should Publish**: ${{ steps.validate-inputs.outputs.should_publish }}"
          echo ""
          echo "### üéØ Publication Targets"
          echo "- GitHub Release: ‚úÖ Enabled"
          echo "- PyPI: ‚ùå Disabled (proof-of-life)"
          echo "- Test PyPI: ${{ github.event.inputs.publish_to_test_pypi == 'true' && '‚úÖ Enabled' || '‚ùå Disabled' }}"

  # ============================================================================
  # SECURITY SCANNING AND VULNERABILITY ASSESSMENT
  # ============================================================================
  security-scan:
    name: 'Security Scanning and Vulnerability Assessment'
    runs-on: ubuntu-latest
    needs: validate-release
    if: github.event.inputs.enable_security_scanning != 'false'
    timeout-minutes: 20

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4  # v4 - Repository checkout with full history
        with:
          fetch-depth: 0

      - name: 'Set up Python 3.10'
        uses: actions/setup-python@v5  # v5 - Python environment setup with build tools
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: 'Install security scanning tools'
        run: |
          python -m pip install --upgrade pip
          python -m pip install safety bandit semgrep pip-audit

      - name: 'Run dependency vulnerability scan'
        run: |
          echo "üîç Scanning dependencies for known vulnerabilities..."

          # Generate requirements for scanning
          python -m pip freeze > requirements-scan.txt

          # Run safety check
          echo "Running safety check..."
          python -m safety check --json --output safety-report.json || true

          # Run pip-audit
          echo "Running pip-audit..."
          python -m pip_audit --format=json --output=pip-audit-report.json . || true

          echo "‚úÖ Dependency vulnerability scan completed"

      - name: 'Run static code security analysis'
        run: |
          echo "üîç Running static code security analysis..."

          # Run bandit for Python security issues
          echo "Running bandit security scanner..."
          python -m bandit -r plume_nav_sim/ -f json -o bandit-report.json || true

          # Display summary
          echo "‚úÖ Static code security analysis completed"

      - name: 'Evaluate security scan results'
        run: |
          #!/bin/bash
          set -euo pipefail

          echo "üìä Security Scan Results Summary"
          echo "================================="

          FAILED_CHECKS=0

          # Check safety results
          if [[ -f safety-report.json ]]; then
              SAFETY_ISSUES=$(jq '.vulnerabilities | length' safety-report.json 2>/dev/null || echo "0")
              echo "Safety vulnerabilities: $SAFETY_ISSUES"
              if [[ $SAFETY_ISSUES -gt 0 ]]; then
                  echo "‚ö†Ô∏è Dependency vulnerabilities detected!"
                  FAILED_CHECKS=$((FAILED_CHECKS + 1))
              fi
          fi

          # Check bandit results
          if [[ -f bandit-report.json ]]; then
              BANDIT_HIGH=$(jq '.results | map(select(.issue_severity == "HIGH")) | length' bandit-report.json 2>/dev/null || echo "0")
              BANDIT_MEDIUM=$(jq '.results | map(select(.issue_severity == "MEDIUM")) | length' bandit-report.json 2>/dev/null || echo "0")
              echo "Bandit HIGH severity issues: $BANDIT_HIGH"
              echo "Bandit MEDIUM severity issues: $BANDIT_MEDIUM"

              if [[ $BANDIT_HIGH -gt 0 ]]; then
                  echo "üö® High severity security issues detected!"
                  FAILED_CHECKS=$((FAILED_CHECKS + 1))
              fi
          fi

          if [[ $FAILED_CHECKS -gt 0 ]]; then
              echo "‚ùå Security scan failed with $FAILED_CHECKS critical issues"
              echo "Review the detailed reports and resolve security issues before publishing"
              exit 1
          else
              echo "‚úÖ Security scan passed - no critical issues detected"
          fi

      - name: 'Upload security scan reports'
        if: always()
        uses: actions/upload-artifact@v4  # v4 - Distribution artifact upload
        with:
          name: security-scan-reports
          path: '*-report.json'
          retention-days: 30

  # ============================================================================
  # COMPREHENSIVE PRE-PUBLICATION TESTING
  # ============================================================================
  comprehensive-testing:
    name: 'Comprehensive Pre-Publication Testing'
    runs-on: ubuntu-latest
    needs: [validate-release, security-scan]
    if: github.event.inputs.run_full_test_suite != 'false'
    timeout-minutes: 45

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4  # v4 - Repository checkout with full history
        with:
          fetch-depth: 0

      - name: 'Set up Python 3.10'
        uses: actions/setup-python@v5  # v5 - Python environment setup with build tools
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: 'Install system dependencies'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libgl1-mesa-glx libglib2.0-0

      - name: 'Install package and test dependencies'
        run: |
          python -m pip install --upgrade pip hatchling
          python -m pip install -e .
          python -m pip install -r requirements-test.txt

      - name: 'Validate package installation'
        run: |
          python scripts/validate_installation.py --verbose --check-all

      - name: 'Run comprehensive test suite'
        run: |
          python scripts/run_tests.py \
            --categories all \
            --enable-performance \
            --generate-reports \
            --coverage-threshold 95 \
            --output-dir test-results-publication

      - name: 'Run publication-specific benchmarks'
        run: |
          python scripts/performance_profiling.py \
            --benchmark-type publication \
            --validate-targets \
            --generate-report \
            --output-file publication-benchmarks.json

      - name: 'Validate package metadata and distribution readiness'
        run: |
          #!/bin/bash
          set -euo pipefail

          echo "üîç Validating package metadata and distribution readiness..."

          # Check pyproject.toml validity
          python -c "import tomllib; import sys; tomllib.load(open('pyproject.toml', 'rb'))"
          echo "‚úÖ pyproject.toml is valid TOML"

          # Validate project metadata
          python -c "
          import sys
          sys.path.insert(0, '.')
          from plume_nav_sim.core.constants import PACKAGE_VERSION
          print(f'Package version: {PACKAGE_VERSION}')
          "

          # Check required files exist
          for file in README.md LICENSE CHANGELOG.md; do
              if [[ ! -f "$file" ]]; then
                  echo "‚ùå Required file missing: $file"
                  exit 1
              fi
              echo "‚úÖ Found required file: $file"
          done

          # Validate import structure
          python -c "
          import plume_nav_sim
          from plume_nav_sim.registration import register_env, ENV_ID
          from plume_nav_sim.envs import PlumeSearchEnv
          print('‚úÖ All core imports successful')
          "

          echo "‚úÖ Package metadata validation completed"

      - name: 'Upload comprehensive test results'
        if: always()
        uses: actions/upload-artifact@v4  # v4 - Distribution artifact upload
        with:
          name: comprehensive-test-results
          path: test-results-publication/
          retention-days: 30

  # ============================================================================
  # CROSS-PLATFORM DISTRIBUTION PACKAGE BUILDING
  # ============================================================================
  build-distribution:
    name: 'Build Distribution Packages (${{ matrix.os }})'
    runs-on: ${{ matrix.os }}
    needs: [validate-release, security-scan]
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            wheel-platform: linux_x86_64
          - os: macos-latest
            platform: macos
            wheel-platform: macosx_10_9_x86_64
          - os: windows-latest
            platform: windows
            wheel-platform: win_amd64

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4  # v4 - Repository checkout with full history
        with:
          fetch-depth: 0

      - name: 'Set up Python 3.10'
        uses: actions/setup-python@v5  # v5 - Python environment setup with build tools
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: 'Install build dependencies'
        run: |
          python -m pip install --upgrade pip build hatchling twine

      - name: 'Update version in pyproject.toml'
        shell: bash
        run: |
          #!/bin/bash
          set -euo pipefail

          VERSION='${{ needs.validate-release.outputs.version }}'
          echo "Updating version to: $VERSION"

          # Update version in pyproject.toml
          if command -v sed >/dev/null 2>&1; then
              sed -i.bak "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          else
              # Windows fallback
              python -c "
          import re
          with open('pyproject.toml', 'r') as f:
              content = f.read()
          content = re.sub(r'^version = .*', f'version = \"$VERSION\"', content, flags=re.MULTILINE)
          with open('pyproject.toml', 'w') as f:
              f.write(content)
          "
          fi

          # Verify version update
          grep "^version = " pyproject.toml
          echo "‚úÖ Version updated successfully"

      - name: 'Build distribution packages'
        run: |
          echo "üèóÔ∏è Building distribution packages for ${{ matrix.platform }}..."

          # Clean any existing build artifacts
          if [ -d "dist" ]; then rm -rf dist; fi
          if [ -d "build" ]; then rm -rf build; fi
          if [ -d "*.egg-info" ]; then rm -rf *.egg-info; fi

          # Build source distribution (only on Linux)
          if [[ '${{ matrix.os }}' == 'ubuntu-latest' ]]; then
              echo "Building source distribution..."
              python -m build --sdist
          fi

          # Build wheel distribution
          echo "Building wheel distribution..."
          python -m build --wheel

          # List built packages
          echo "üì¶ Built packages:"
          ls -la dist/

          # Verify packages
          echo "üîç Verifying built packages..."
          python -m twine check dist/*

          echo "‚úÖ Distribution packages built successfully"

      - name: 'Test distribution package installation'
        run: |
          echo "üß™ Testing distribution package installation..."

          # Create test environment
          python -m venv test-install-env

          # Activate virtual environment (platform-specific)
          if [[ '${{ runner.os }}' == 'Windows' ]]; then
              source test-install-env/Scripts/activate
          else
              source test-install-env/bin/activate
          fi

          # Install from built wheel
          WHEEL_FILE=$(find dist/ -name "*.whl" | head -1)
          echo "Installing wheel: $WHEEL_FILE"
          pip install "$WHEEL_FILE"

          # Test basic functionality
          echo "Testing package functionality..."
          python -c "
          import plume_nav_sim
          from plume_nav_sim.registration import register_env, ENV_ID
          register_env()
          print('‚úÖ Package installation and basic functionality test passed')
          "

          deactivate
          echo "‚úÖ Distribution package installation test completed"

      - name: 'Upload distribution artifacts'
        uses: actions/upload-artifact@v4  # v4 - Distribution artifact upload
        with:
          name: dist-${{ matrix.platform }}
          path: dist/
          retention-days: 90

  # ============================================================================
  # GITHUB RELEASE CREATION AND ASSET MANAGEMENT
  # ============================================================================
  create-github-release:
    name: 'Create GitHub Release'
    runs-on: ubuntu-latest
    needs: [validate-release, comprehensive-testing, build-distribution]
    if: github.event.inputs.create_github_release != 'false' && needs.validate-release.outputs.should-publish == 'true'
    timeout-minutes: 15

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4  # v4 - Repository checkout with full history
        with:
          fetch-depth: 0

      - name: 'Download all distribution artifacts'
        uses: actions/download-artifact@v4
        with:
          pattern: 'dist-*'
          path: release-artifacts/
          merge-multiple: true

      - name: 'Generate release notes'
        id: release-notes
        run: |
          #!/bin/bash
          set -euo pipefail

          VERSION='${{ needs.validate-release.outputs.version }}'
          IS_PRERELEASE='${{ needs.validate-release.outputs.is-prerelease }}'
          RELEASE_TYPE='${{ needs.validate-release.outputs.release-type }}'

          echo "üìù Generating release notes for version $VERSION..."

          # Create release notes
          cat > release-notes.md << EOF
          # üöÄ plume-nav-sim $VERSION

          ## Release Information
          - **Version**: $VERSION
          - **Release Type**: $RELEASE_TYPE
          - **Pre-release**: $IS_PRERELEASE
          - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Commit SHA**: ${{ github.sha }}

          ## üìã What's New

          This release includes:

          - ‚úÖ **Gymnasium Environment**: Complete RL environment implementation
          - ‚úÖ **Static Gaussian Plume Model**: Mathematical plume distribution
          - ‚úÖ **Dual Rendering Modes**: RGB array and interactive matplotlib visualization
          - ‚úÖ **Reproducible Episodes**: Deterministic behavior through seeding
          - ‚úÖ **Performance Optimized**: <1ms step execution, <5ms rendering
          - ‚úÖ **Cross-Platform Support**: Linux, macOS, and limited Windows compatibility

          ## üîß Installation

          \`\`\`bash
          # Install from GitHub release
          pip install https://github.com/plume-nav-sim/plume_nav_sim/releases/download/v$VERSION/plume_nav_sim-$VERSION-py3-none-any.whl

          # Or install in development mode
          git clone https://github.com/plume-nav-sim/plume_nav_sim.git
          cd plume_nav_sim/src/backend
          pip install -e .
          \`\`\`

          ## üìö Quick Start

          \`\`\`python
          import gymnasium as gym
          from plume_nav_sim.registration import register_env, ENV_ID

          # Register and create environment
          register_env()
          env = gym.make(ENV_ID, render_mode="human")

          # Run episode
          obs, info = env.reset(seed=42)
          for step in range(100):
              action = env.action_space.sample()
              obs, reward, terminated, truncated, info = env.step(action)
              env.render()
              if terminated or truncated:
                  break
          env.close()
          \`\`\`

          ## üéØ System Requirements

          - Python >= 3.10
          - gymnasium >= 0.29.0
          - numpy >= 2.1.0
          - matplotlib >= 3.9.0 (optional, for human rendering)

          ## üìä Performance Metrics

          - Environment step execution: <1ms
          - RGB array rendering: <5ms
          - Interactive rendering: <50ms
          - Memory footprint: <50MB
          - Test coverage: >95%

          ## üîó Documentation

          - [API Reference](https://plume-nav-sim.readthedocs.io)
          - [User Guide](https://github.com/plume-nav-sim/plume_nav_sim/blob/main/docs/user_guide.py)
          - [Developer Guide](https://github.com/plume-nav-sim/plume_nav_sim/blob/main/docs/developer_guide.py)
          - [Examples](https://github.com/plume-nav-sim/plume_nav_sim/tree/main/examples)

          ## üêõ Bug Reports

          Please report issues at: https://github.com/plume-nav-sim/plume_nav_sim/issues

          ## üìÑ License

          MIT License - see [LICENSE](https://github.com/plume-nav-sim/plume_nav_sim/blob/main/LICENSE)

          EOF

          # Extract changelog section if available
          if [[ -f CHANGELOG.md ]]; then
              echo ""
              echo "## üìù Detailed Changelog"
              echo ""

              # Try to extract relevant changelog section
              if grep -q "## \[$VERSION\]" CHANGELOG.md; then
                  sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | head -n -1
              else
                  echo "See [CHANGELOG.md](https://github.com/plume-nav-sim/plume_nav_sim/blob/main/CHANGELOG.md) for detailed changes."
              fi
          fi >> release-notes.md

          echo "‚úÖ Release notes generated"
          cat release-notes.md

      - name: 'Prepare release assets'
        run: |
          echo "üì¶ Preparing release assets..."

          # List available artifacts
          echo "Available artifacts:"
          find release-artifacts/ -type f -name "*.whl" -o -name "*.tar.gz" | sort

          # Create checksums
          echo "Generating checksums..."
          cd release-artifacts/
          for file in *.whl *.tar.gz; do
              if [[ -f "$file" ]]; then
                  sha256sum "$file" >> checksums.sha256
              fi
          done
          cd ..

          echo "üìã Checksums:"
          cat release-artifacts/checksums.sha256

          echo "‚úÖ Release assets prepared"

      - name: 'Create GitHub Release'
        uses: actions/create-release@v1  # v1 - Automated GitHub release creation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          release_name: plume-nav-sim v${{ needs.validate-release.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is-prerelease }}

      - name: 'Upload release assets'
        run: |
          echo "üì§ Uploading release assets..."

          # This would upload distribution files to the GitHub release
          # Implementation would use GitHub CLI or REST API to attach assets

          for file in release-artifacts/*.whl release-artifacts/*.tar.gz release-artifacts/checksums.sha256; do
              if [[ -f "$file" ]]; then
                  echo "Would upload: $(basename "$file")"
              fi
          done

          echo "‚úÖ Release assets upload completed"
          echo "üéâ GitHub release created successfully!"

  # ============================================================================
  # TEST PYPI PUBLICATION (FUTURE IMPLEMENTATION)
  # ============================================================================
  publish-test-pypi:
    name: 'Publish to Test PyPI'
    runs-on: ubuntu-latest
    needs: [validate-release, comprehensive-testing, build-distribution]
    if: github.event.inputs.publish_to_test_pypi == 'true' && needs.validate-release.outputs.should-publish == 'true'
    timeout-minutes: 15

    environment:
      name: test-pypi
      url: https://test.pypi.org/project/plume-nav-sim/

    steps:
      - name: 'Download Linux distribution artifacts'
        uses: actions/download-artifact@v4
        with:
          name: dist-linux
          path: dist/

      - name: 'Prepare Test PyPI publication'
        run: |
          echo "üöÄ Preparing Test PyPI publication..."
          echo "Package: plume-nav-sim"
          echo "Version: ${{ needs.validate-release.outputs.version }}"
          echo "Files to publish:"
          ls -la dist/

          echo "‚ö†Ô∏è Test PyPI publication is prepared but not executed in proof-of-life"
          echo "This would require Test PyPI API tokens and account setup"

      - name: 'Future Test PyPI Publication'
        run: |
          echo "üìã Test PyPI Publication Configuration (Future Implementation)"
          echo ""
          echo "This step would use:"
          echo "- pypa/gh-action-pypi-publish@release/v1"
          echo "- OIDC trusted publishing"
          echo "- Test PyPI repository URL"
          echo "- Automated package verification"
          echo ""
          echo "‚úÖ Test PyPI publication configuration validated"

  # ============================================================================
  # PRODUCTION PYPI PUBLICATION (DISABLED FOR PROOF-OF-LIFE)
  # ============================================================================
  publish-production-pypi:
    name: 'Publish to Production PyPI'
    runs-on: ubuntu-latest
    needs: [validate-release, comprehensive-testing, build-distribution, create-github-release]
    if: github.event.inputs.publish_to_pypi == 'true' && needs.validate-release.outputs.should-publish == 'true' && needs.validate-release.outputs.is-prerelease == 'false'
    timeout-minutes: 15

    environment:
      name: production-pypi
      url: https://pypi.org/project/plume-nav-sim/

    steps:
      - name: 'Production PyPI Publication Placeholder'
        run: |
          echo "üö´ Production PyPI publication is DISABLED for proof-of-life"
          echo ""
          echo "This workflow step is included for future implementation but will not execute."
          echo ""
          echo "Production PyPI publication would require:"
          echo "- PyPI account and API tokens"
          echo "- Package name reservation"
          echo "- Production-ready documentation"
          echo "- Comprehensive security review"
          echo "- Community support infrastructure"
          echo ""
          echo "Current status: Proof-of-life implementation - GitHub releases only"
          echo "‚úÖ Production PyPI configuration documented for future use"

  # ============================================================================
  # POST-PUBLICATION VALIDATION AND NOTIFICATION
  # ============================================================================
  post-publication-validation:
    name: 'Post-Publication Validation and Notification'
    runs-on: ubuntu-latest
    needs: [create-github-release, publish-test-pypi]
    if: always() && (needs.create-github-release.result == 'success' || needs.publish-test-pypi.result == 'success')
    timeout-minutes: 10

    steps:
      - name: 'Validate published release'
        run: |
          echo "üîç Validating published release..."

          VERSION='${{ needs.validate-release.outputs.version }}'

          # Check GitHub release
          echo "Checking GitHub release v$VERSION..."
          if curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION" | grep -q "tag_name"; then
              echo "‚úÖ GitHub release v$VERSION is accessible"
          else
              echo "‚ö†Ô∏è GitHub release may not be immediately accessible (propagation delay)"
          fi

          # Future: Validate PyPI publication
          echo "üìã Future PyPI validation would check:"
          echo "- Package availability at pypi.org/project/plume-nav-sim/"
          echo "- Installation via 'pip install plume-nav-sim==$VERSION'"
          echo "- Basic import functionality"

          echo "‚úÖ Post-publication validation completed"

      - name: 'Generate publication summary'
        run: |
          echo "## üéâ Publication Summary"
          echo ""
          echo "**Package**: plume-nav-sim"
          echo "**Version**: ${{ needs.validate-release.outputs.version }}"
          echo "**Release Type**: ${{ needs.validate-release.outputs.release-type }}"
          echo "**Workflow**: ${{ github.workflow }}"
          echo "**Run ID**: ${{ github.run_id }}"
          echo ""
          echo "### üì¶ Publication Status"
          echo "- GitHub Release: ${{ needs.create-github-release.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}"
          echo "- Test PyPI: ${{ needs.publish-test-pypi.result == 'success' && '‚úÖ Success' || needs.publish-test-pypi.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}"
          echo "- Production PyPI: üö´ Disabled (proof-of-life)"
          echo ""
          echo "### üîó Links"
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-release.outputs.version }})"
          echo "- [Repository](https://github.com/${{ github.repository }})"
          echo "- [Documentation](https://plume-nav-sim.readthedocs.io)"
          echo ""
          echo "### üöÄ Next Steps"
          echo "- Test the released package in a fresh environment"
          echo "- Update documentation if needed"
          echo "- Monitor for issues and user feedback"
          echo "- Plan next development milestone"
          echo ""
          echo "**Publication completed successfully! üéä**"

      - name: 'Future notification integration'
        run: |
          echo "üì¢ Future Notification Integration"
          echo ""
          echo "This step would integrate with:"
          echo "- Slack/Discord notifications for team updates"
          echo "- Email notifications for stakeholder updates"
          echo "- GitHub Discussions announcement post"
          echo "- Documentation site update triggers"
          echo "- Social media automation (Twitter, LinkedIn)"
          echo ""
          echo "For proof-of-life: GitHub Actions summary provides publication status"

  # ============================================================================
  # CLEANUP AND MAINTENANCE
  # ============================================================================
  cleanup:
    name: 'Cleanup and Maintenance'
    runs-on: ubuntu-latest
    needs: [create-github-release, publish-test-pypi, post-publication-validation]
    if: always()
    timeout-minutes: 5

    steps:
      - name: 'Clean up workflow artifacts'
        run: |
          echo "üßπ Cleaning up workflow artifacts and temporary files..."

          # This would handle cleanup of:
          # - Temporary build artifacts
          # - Security scan results
          # - Large test outputs
          # - Cached dependencies

          echo "‚úÖ Cleanup tasks would be implemented here for:"
          echo "- Build artifact cleanup"
          echo "- Cache management"
          echo "- Temporary file removal"
          echo "- Resource optimization"

      - name: 'Archive publication logs'
        run: |
          echo "üìã Archiving publication logs and metadata..."

          # Generate publication metadata
          cat > publication-metadata.json << EOF
          {
            "version": "${{ needs.validate-release.outputs.version }}",
            "release_type": "${{ needs.validate-release.outputs.release-type }}",
            "is_prerelease": ${{ needs.validate-release.outputs.is-prerelease }},
            "workflow_run_id": "${{ github.run_id }}",
            "workflow_run_number": ${{ github.run_number }},
            "git_sha": "${{ github.sha }}",
            "timestamp": "$(date -u -Iseconds)",
            "trigger": "${{ github.event_name }}",
            "actor": "${{ github.actor }}",
            "github_release_created": ${{ needs.create-github-release.result == 'success' }},
            "test_pypi_published": ${{ needs.publish-test-pypi.result == 'success' }}
          }
          EOF

          echo "üìä Publication Metadata:"
          cat publication-metadata.json

          echo "‚úÖ Publication logs archived"
