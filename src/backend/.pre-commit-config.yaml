# Pre-commit hooks configuration for plume_nav_sim reinforcement learning environment
# Provides comprehensive automated code quality enforcement integrating black, flake8, mypy,
# bandit, isort, pydocstyle, and custom validation hooks for scientific Python development

default_language_version:
  python: python3

minimum_pre_commit_version: '3.6.0'

default_install_hook_types: [pre-commit, pre-push, commit-msg]

# File patterns for hook execution optimization
files: '\.(py|pyi|ipynb|yaml|yml|toml|json|md|txt)$'
exclude: '^(build/|dist/|\.tox/|\.venv/|venv/|node_modules/|\.pytest_cache/|__pycache__/|\.mypy_cache/|\.coverage|\.git/)'

# Fail fast disabled to run all hooks and provide comprehensive feedback
fail_fast: false

ci:
  autofix_commit_msg: 'style: auto-fix code style and formatting issues'
  autofix_prs: true
  autoupdate_commit_msg: 'chore: update pre-commit hooks'
  autoupdate_schedule: weekly
  skip: []

repos:
  # Ensure Jupyter notebooks are clean in commits (strip outputs/exec counts)
  - repo: local
    hooks:
      - id: nb-clean
        name: Strip Jupyter notebook outputs
        description: Remove outputs and execution counts from .ipynb files
        entry: bash
        language: system
        files: '\\.(ipynb)$'
        pass_filenames: true
        args: ['-lc', 'python3 src/backend/scripts/strip_notebook_outputs.py "$@"']

  # Optional: Use nbstripout when available (CI/devs with pre-commit network)
  - repo: https://github.com/kynan/nbstripout
    rev: 0.7.1
    hooks:
      - id: nbstripout
        name: nbstripout (strip Notebook outputs)
        files: '\\.(ipynb)$'
        types: [file]
        additional_dependencies: []

  # Ruff: fast linter and formatter (complements/optionally replaces flake8 + black)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.3
    hooks:
      - id: ruff
        name: Ruff Lint (auto-fix)
        description: Lint with Ruff and auto-apply safe fixes
        types: [python]
        args: ["--fix"]
        files: '^src/backend/plume_nav_sim/'

  # Official pre-commit hooks repository for basic file validation and quality checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        name: Trim Trailing Whitespace
        description: Remove trailing whitespace from all files
        args: ['--markdown-linebreak-ext=md']
        types: [text]
        exclude: '^(.*\.md|.*\.txt)$'

      - id: end-of-file-fixer
        name: Fix End of Files
        description: Ensure files end with newline character
        types: [text]
        exclude: '^(.*\.svg|.*\.png|.*\.jpg)$'

      - id: check-yaml
        name: Check YAML Syntax
        description: Validate YAML file syntax including pre-commit config files
        types: [yaml]
        args: ['--multi']

      - id: check-toml
        name: Check TOML Syntax
        description: Validate TOML file syntax including pyproject.toml
        types: [toml]

      - id: check-json
        name: Check JSON Syntax
        description: Validate JSON file syntax for configuration files
        types: [json]

      - id: check-added-large-files
        name: Check Large Files
        description: Prevent accidental large file commits
        args: ['--maxkb=1000']

      - id: check-merge-conflict
        name: Check Merge Conflicts
        description: Prevent commits with merge conflict markers
        types: [text]

      - id: debug-statements
        name: Debug Statement Detection
        description: Detect and prevent Python debug statements
        language: python
        types: [python]
        exclude: '^src/backend/docs/'

      - id: name-tests-test
        name: Test File Naming
        description: Ensure test files follow naming conventions
        files: 'tests/.*\.py$'
        exclude: 'tests/(strategies|conftest|__init__)\.py$'
        args: ['--django']

  # Markdownlint for consistent markdown documentation style
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: 'v0.41.0'
    hooks:
      - id: markdownlint
        name: Markdown Linting
        description: Enforce consistent markdown style and best practices
        types: [markdown]
        args: ['--fix', '--disable', 'MD013', 'MD033', 'MD041']
        exclude: '^(CHANGELOG\.md|\.github/)'

  # Sourcery AI-powered refactoring (auto-fix mode - applies safe refactorings)
  - repo: https://github.com/sourcery-ai/sourcery
    rev: v1.16.0
    hooks:
      - id: sourcery
        name: Sourcery Code Quality (Auto-fix)
        description: AI-powered code refactoring with automatic fixes
        types: [python]
        args: ['--fix', '--no-summary']
        stages: [manual]  # Only when explicitly invoked
        verbose: true
        # Note: Requires SOURCERY_TOKEN environment variable for full functionality
        # Run manually with: pre-commit run sourcery --all-files --hook-stage manual
        # WARNING: This will modify files in-place! Review changes before committing.

  # Black code formatter for consistent Python code style
  - repo: https://github.com/psf/black
    rev: '24.2.0'
    hooks:
      - id: black
        name: Black Code Formatting
        description: Automated Python code formatting with Black formatter
        language: python
        types: [python]
        args: ['--line-length=88', '--target-version=py310']
        exclude: '^(build/|dist/|\.tox/|src/backend/docs/)'

      - id: black-jupyter
        name: Black Jupyter Formatting
        description: Black formatting for Jupyter notebooks
        language: python
        types: [jupyter]
        additional_dependencies: ['black[jupyter]']

  # isort import sorting utility for consistent import organization
  - repo: https://github.com/PyCQA/isort
    rev: '5.13.2'
    hooks:
      - id: isort
        name: Import Sorting
        description: Automated Python import organization and sorting
        language: python
        types: [python]
        args: ['--profile=black', '--line-length=88', '--multi-line=3']
        additional_dependencies: ['isort[colors]']
        exclude: '^(build/|dist/|\.tox/|src/backend/docs/)'

  # flake8 comprehensive Python linting with extensive plugin support
  - repo: https://github.com/PyCQA/flake8
    rev: '7.0.0'
    hooks:
      - id: flake8
        name: Flake8 Linting
        description: Comprehensive Python code linting and style checking
        language: python
        types: [python]
        stages: [manual]
        files: '^src/backend/plume_nav_sim/'
        args: ['--max-line-length=88', '--extend-ignore=E203,W503,E501', '--max-complexity=10', '--select=E,W,F,C,N']
        additional_dependencies: ['flake8-comprehensions', 'flake8-bugbear']

  # MyPy static type checking for comprehensive type analysis
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: 'v1.8.0'
    hooks:
      - id: mypy
        name: MyPy Type Checking
        description: Static type analysis and checking for Python code
        language: python
        types: [python]
        stages: [manual]
        pass_filenames: false
        args: ['--show-error-codes', '--explicit-package-bases', '--follow-imports=skip', '--ignore-missing-imports', '--config-file=src/backend/mypy.ini', 'src/backend/plume_nav_sim/utils/logging.py', 'src/backend/plume_nav_sim/logging/config.py', 'src/backend/plume_nav_sim/logging/loggers.py']
        additional_dependencies: ['types-setuptools', 'types-requests', 'numpy', 'gymnasium', 'matplotlib']
        exclude: '^(src/backend/tests/|examples/|benchmarks/|src/backend/docs/)'

  # Bandit security linting for vulnerability detection and secure coding practices
  - repo: https://github.com/PyCQA/bandit
    rev: '1.7.5'
    hooks:
      - id: bandit
        name: Bandit Security Scanning
        description: Security vulnerability detection and analysis
        language: python
        types: [python]
        stages: [pre-push]
        pass_filenames: false
        args: ['-r', 'src/backend/plume_nav_sim', '--format', 'txt', '--quiet', '--severity-level', 'high', '--confidence-level', 'high', '-x', 'src/backend/tests,src/backend/examples,src/backend/docs', '--skip=B101,B601']
        additional_dependencies: ['pbr']
        exclude: '^(tests/|examples/)'

  # pydocstyle docstring style checker enforcing PEP 257 and scientific documentation standards
  - repo: https://github.com/PyCQA/pydocstyle
    rev: '6.3.0'
    hooks:
      - id: pydocstyle
        name: Docstring Style Checking
        description: Python docstring style validation and enforcement
        language: python
        types: [python]
        stages: [pre-push]
        args: ['--convention=numpy', '--add-ignore=D100,D102,D104,D105,D200,D202,D205,D400,D401,D406,D407']
        files: '^src/backend/plume_nav_sim/'
        exclude: '^(src/backend/plume_nav_sim/render/|src/backend/plume_nav_sim/utils/spaces\.py$)'
        additional_dependencies: ['tomli']

  # Commitizen commit message standardization and versioning
  - repo: https://github.com/commitizen-tools/commitizen
    rev: 'v4.9.1'
    hooks:
      - id: commitizen
        name: Commitizen Check
        description: Commit message format validation
        stages: [commit-msg]
        args: ['check', '--commit-msg-file']

  # Local pytest execution for quick test validation before commits
  - repo: local
    hooks:
      - id: pytest-check
        name: Import Smoke Test
        description: Lightweight import smoke test to ensure package loads
        stages: [pre-push]
        entry: bash
        language: system
        args: ['-lc', 'conda run -n plume-nav-sim python -c "import importlib; import plume_nav_sim as p; print(p.__name__)"']
        pass_filenames: false
        always_run: true

  # Custom local hooks for project-specific validation and quality assurance
  - repo: local
    hooks:
      - id: requirements-sync
        name: Requirements Synchronization
        description: Validate requirements files are synchronized with pyproject.toml
        stages: [pre-push]
        entry: bash
        language: system
        args: ['-lc', 'test -f src/backend/scripts/validate_requirements_sync.py && python3 src/backend/scripts/validate_requirements_sync.py || exit 0']
        files: '^(requirements.*\.txt|pyproject\.toml)$'
        pass_filenames: false

      - id: changelog-update
        name: Changelog Update Check
        description: Ensure CHANGELOG.md is updated for significant changes
        stages: [pre-push]
        entry: bash
        language: system
        args: ['-lc', 'test -f src/backend/scripts/check_changelog_update.py && python3 src/backend/scripts/check_changelog_update.py || exit 0']
        files: '^src/backend/plume_nav_sim/'
        pass_filenames: false

      - id: license-headers
        name: License Header Validation
        description: Ensure proper license headers in source files
        stages: [pre-push]
        entry: bash
        language: system
        args: ['-lc', 'test -f src/backend/scripts/check_license_headers.py && python3 src/backend/scripts/check_license_headers.py || exit 0']
        files: '\.py$'
        exclude: '^(tests/|setup\.py)'
  # Local hooks
  - repo: local
    hooks:
      - id: constants-drift-check
        name: Validate constants drift (YAML vs Python)
        entry: bash
        language: system
        args: ['-lc', 'cd src/backend && conda run -n plume-nav-sim python scripts/validate_constants_drift.py']
        pass_filenames: false
        stages: [pre-push]
        files: '^(config/constants\.yaml|src/backend/plume_nav_sim/core/constants\.py)$'

  # Commitizen-based release reminder (warn-only by default)
  - repo: local
    hooks:
      - id: cz-release-reminder
        name: Release reminder (Commitizen)
        description: Warn if feat/fix or BREAKING CHANGE commits exist since last tag and version not bumped
        stages: [pre-push]
        entry: bash
        args: ['-lc', 'test -f src/backend/scripts/check_release_bump_needed.py && python3 src/backend/scripts/check_release_bump_needed.py || exit 0']
        language: system
        pass_filenames: false
        always_run: true
