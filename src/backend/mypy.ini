# MyPy static type checking configuration file for plume_nav_sim
# Version: 1.0.0
# Provides comprehensive type analysis settings for the plume_nav_sim reinforcement learning environment package
# Supports Python 3.10-3.13 type checking with enhanced error reporting, performance optimization, and IDE integration

[mypy]
# Target Python version for type checking ensuring compatibility with minimum supported version
python_version = 3.10
mypy_path = src/backend

# Core type checking settings
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = True
disallow_incomplete_defs = True
no_implicit_optional = True
warn_redundant_casts = True
warn_unused_ignores = True
strict_equality = True
check_untyped_defs = True

# Enhanced error reporting settings
show_error_codes = True
show_column_numbers = True
pretty = True
error_summary = True

# Performance optimization settings
cache_dir = .mypy_cache
sqlite_cache = True
incremental = True

# Import following configuration
follow_imports = normal
ignore_missing_imports = False

# Strict core package configuration for plume_nav_sim modules
[mypy-plume_nav_sim.*]
# Comprehensive strict type checking for production code
disallow_any_generics = True
disallow_subclassing_any = True
disallow_untyped_calls = True
disallow_untyped_decorators = True
disallow_any_explicit = True
no_implicit_reexport = True
strict_optional = True
warn_unreachable = True

# Additional strict settings for core package
disallow_any_unimported = True
disallow_any_expr = False
warn_no_return = True
warn_return_any = True

# Relaxed configuration for test modules to allow test-specific patterns
[mypy-tests.*]
disallow_untyped_defs = False
disallow_incomplete_defs = False
disallow_any_explicit = False
warn_return_any = False
no_implicit_reexport = False
disallow_untyped_calls = False
disallow_untyped_decorators = False

# Allow test fixtures and mock objects flexibility
disallow_any_generics = False
strict_optional = False

# Configuration for gymnasium package - use type stubs when available
[mypy-gymnasium.*]
ignore_missing_imports = False
follow_imports = normal
# Gymnasium provides comprehensive type stubs for RL environment type checking
strict_optional = True
warn_return_any = True

# Configuration for numpy package - comprehensive array type checking
[mypy-numpy.*]
ignore_missing_imports = False
follow_imports = normal
# NumPy type stubs provide comprehensive ndarray type support
strict_optional = True
warn_return_any = False

# Special handling for numpy.random module
[mypy-numpy.random.*]
ignore_missing_imports = False
follow_imports = normal

# Configuration for matplotlib package - visualization type checking with fallback handling
[mypy-matplotlib.*]
ignore_missing_imports = True
follow_imports = skip
# Matplotlib type stubs may be incomplete for some backends and optional dependencies
warn_return_any = False

# Specific matplotlib backend handling
[mypy-matplotlib.pyplot.*]
ignore_missing_imports = True
follow_imports = skip

[mypy-matplotlib.backends.*]
ignore_missing_imports = True
follow_imports = skip

# Relaxed configuration for benchmark modules allowing performance testing patterns
[mypy-benchmarks.*]
disallow_untyped_defs = False
warn_return_any = False
disallow_incomplete_defs = False
# Performance measurement utilities may need flexible typing
disallow_any_explicit = False
check_untyped_defs = False

# Relaxed configuration for example scripts prioritizing educational clarity
[mypy-examples.*]
disallow_untyped_defs = False
disallow_incomplete_defs = False
warn_return_any = False
no_implicit_reexport = False
# Educational examples should focus on concept demonstration over strict typing
disallow_any_explicit = False
disallow_untyped_calls = False

# Relaxed configuration for utility scripts allowing operational scripting patterns
[mypy-scripts.*]
disallow_untyped_defs = False
check_untyped_defs = False
warn_return_any = False
disallow_incomplete_defs = False
# Operational scripts need flexibility for rapid development and deployment tasks
no_implicit_reexport = False

# Configuration for setuptools and build tools
[mypy-setuptools.*]
ignore_missing_imports = True
follow_imports = skip

# Configuration for pytest testing framework
[mypy-pytest.*]
ignore_missing_imports = True
follow_imports = skip

# Configuration for common development dependencies
[mypy-click.*]
ignore_missing_imports = True

[mypy-requests.*]
ignore_missing_imports = True

# Scientific Python ecosystem packages
[mypy-scipy.*]
ignore_missing_imports = True
follow_imports = skip

[mypy-pandas.*]
ignore_missing_imports = True
follow_imports = skip

# Jupyter notebook support
[mypy-IPython.*]
ignore_missing_imports = True

[mypy-jupyter.*]
ignore_missing_imports = True

# Performance profiling tools
[mypy-cProfile.*]
ignore_missing_imports = True

[mypy-pstats.*]
ignore_missing_imports = True

# Memory profiling
[mypy-memory_profiler.*]
ignore_missing_imports = True

[mypy-psutil.*]
ignore_missing_imports = True

# Development tools
[mypy-black.*]
ignore_missing_imports = True

[mypy-flake8.*]
ignore_missing_imports = True

[mypy-bandit.*]
ignore_missing_imports = True

# Documentation tools
[mypy-sphinx.*]
ignore_missing_imports = True

# Package management and build tools
[mypy-pip.*]
ignore_missing_imports = True

[mypy-wheel.*]
ignore_missing_imports = True

[mypy-twine.*]
ignore_missing_imports = True

# Version control integration
[mypy-git.*]
ignore_missing_imports = True

# Configuration for standard library modules that may have typing issues
[mypy-tkinter.*]
ignore_missing_imports = True

[mypy-_tkinter.*]
ignore_missing_imports = True

# Platform-specific modules
[mypy-fcntl.*]
ignore_missing_imports = True

[mypy-termios.*]
ignore_missing_imports = True