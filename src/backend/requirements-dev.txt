# plume_nav_sim Development Dependencies
# Development requirements specification version 1.0.0
# Comprehensive third-party packages required exclusively for development workflows
# including code quality tools, formatters, linters, type checkers, pre-commit hooks,
# documentation generation, and build utilities supporting the complete development
# lifecycle from code writing and testing to package building and distribution
# following modern Python development best practices for scientific computing projects.

# =============================================================================
# CODE QUALITY AND FORMATTING TOOLS
# =============================================================================

# Python code formatting tool providing consistent code style enforcement
# with minimal configuration, pyproject.toml integration, and support for
# Python 3.10-3.13 with enhanced performance and modern syntax handling.
# Version 24.0.0+ provides Python 3.10-3.13 compatibility, enhanced performance,
# improved pyproject.toml integration, and modern syntax handling with stable
# formatting rules. Fully compatible with scientific Python code patterns,
# matplotlib imports, and gymnasium framework code structure.
black>=24.0.0

# Code linting tool combining pycodestyle, pyflakes, and McCabe complexity
# checking for comprehensive code quality analysis with extensive plugin
# ecosystem and configurable rule sets. Version 7.0.0+ provides enhanced
# error reporting, Python 3.10-3.13 compatibility, improved performance,
# and extensive plugin ecosystem with configurable rule sets. Compatible
# with scientific computing patterns, gymnasium environment code, and
# reinforcement learning project structures.
flake8>=7.0.0

# Static type checker providing type safety validation, enhanced IDE support,
# and comprehensive type analysis for Python with support for scientific
# computing libraries including numpy and gymnasium. Version 1.8.0+ provides
# advanced type inference, Python 3.10-3.13 support, enhanced scientific
# library compatibility, and improved performance with comprehensive type
# analysis. Includes type stubs for numpy, matplotlib, and supports gymnasium
# type annotations with proper handling of scientific computing patterns.
mypy>=1.8.0

# Import sorting utility with black compatibility, multi-line output formatting,
# and configurable import grouping for consistent code organization and
# maintainability. Version 5.13.0+ provides black compatibility, enhanced
# import grouping, improved performance, and comprehensive configuration
# options for scientific Python projects. Configured for scientific Python
# import patterns with proper grouping of gymnasium, numpy, matplotlib,
# and other scientific libraries.
isort>=5.13.0

# Security linting tool for Python providing vulnerability detection, secure
# coding practice enforcement, and comprehensive security analysis with
# configurable severity levels and exclusion patterns. Version 1.7.5+
# provides comprehensive security scanning, Python 3.10-3.13 support,
# configurable severity levels, and enhanced vulnerability detection for
# Python projects. Configured with appropriate exclusions for test files
# and scientific computing patterns while maintaining security analysis.
bandit>=1.7.5

# =============================================================================
# DEVELOPMENT WORKFLOW AUTOMATION
# =============================================================================

# Git hook management framework for automated code quality checks, formatting,
# and validation before commits with multi-language support and extensive
# hook ecosystem. Version 3.6.0+ provides enhanced hook management, improved
# performance, Python 3.10-3.13 compatibility, and comprehensive git
# integration with multi-language support. Integrates all development tools
# in automated workflow with configurable execution stages and performance
# optimization for development velocity.
pre-commit>=3.6.0

# =============================================================================
# DOCUMENTATION GENERATION TOOLS
# =============================================================================

# Documentation generation system providing comprehensive API documentation,
# user guides, and developer documentation with reStructuredText support
# and extensive theming capabilities. Version 7.0.0+ provides modern
# documentation generation, Python 3.10-3.13 support, enhanced theming
# capabilities, and comprehensive API documentation extraction. Supports
# scientific Python docstring formats, gymnasium API documentation, and
# reinforcement learning project documentation patterns.
sphinx>=7.0.0

# Read the Docs Sphinx theme providing professional documentation styling,
# responsive design, and enhanced navigation for comprehensive project
# documentation. Version 2.0.0+ provides professional documentation styling,
# responsive design, enhanced navigation, and modern theming capabilities
# for comprehensive project documentation with scientific Python compatibility.
sphinx-rtd-theme>=2.0.0

# Sphinx extension for parsing Google and NumPy style docstrings enabling
# comprehensive API documentation generation from existing scientific Python
# docstring formats. Version 0.7+ provides comprehensive docstring parsing
# for Google and NumPy style formats enabling API documentation generation
# from scientific Python docstring conventions with full Sphinx integration.
sphinxcontrib-napoleon>=0.7

# =============================================================================
# PACKAGE BUILDING AND DISTRIBUTION TOOLS
# =============================================================================

# Modern Python build backend providing extensible build system with dynamic
# versioning, metadata management, and distribution package generation
# following PEP 517/518 standards. Version 1.21.0+ provides modern Python
# build backend with extensible build system, dynamic versioning, metadata
# management, and distribution package generation following PEP 517/518
# standards for contemporary Python package development.
hatchling>=1.21.0

# Python package building tool providing PEP 517/518 compliant package
# building, wheel generation, and source distribution creation with modern
# build backend support. Version 1.0.0+ provides PEP 517/518 compliant
# package building, wheel generation, source distribution creation, and
# modern build backend support for contemporary Python package development.
build>=1.0.0

# =============================================================================
# TESTING AUTOMATION AND QUALITY ASSURANCE
# =============================================================================

# Testing automation tool for multi-environment testing, dependency management,
# and quality assurance workflows with Python version compatibility testing
# and CI/CD integration. Version 4.0.0+ provides enhanced multi-environment
# testing, improved dependency resolution, Python 3.10-3.13 support, and
# comprehensive CI/CD integration. Configured for Python version compatibility
# testing with appropriate scientific library installations across different
# environments.
tox>=4.0.0

# =============================================================================
# DEVELOPMENT CATEGORIES SUMMARY
# =============================================================================

# Code Formatting: black, isort
# - Automated code formatting and import organization for consistent code
#   style across the plume_nav_sim project integrated with pre-commit hooks
#   and IDE configurations for seamless development workflow

# Code Quality: flake8, mypy, bandit  
# - Comprehensive code quality analysis including linting, type checking,
#   and security scanning for robust code development automated through
#   pre-commit hooks with configurable severity levels and exclusion patterns

# Documentation: sphinx, sphinx-rtd-theme, sphinxcontrib-napoleon
# - Professional documentation generation including API references, user guides,
#   and developer documentation automated with scientific Python docstring
#   support and professional theming

# Build and Distribution: hatchling, build
# - Modern Python package building and distribution following PEP 517/518
#   standards integrated with pyproject.toml configuration for automated
#   package building and distribution

# Testing Automation: tox
# - Multi-environment testing and quality assurance automation for Python
#   version compatibility coordinated with pytest configuration and CI/CD
#   pipelines for comprehensive testing workflows

# Workflow Automation: pre-commit
# - Development workflow automation with git hooks for automated code quality
#   enforcement orchestrating all development tools in automated pre-commit
#   workflow with performance optimization

# =============================================================================
# INSTALLATION AND SETUP INSTRUCTIONS
# =============================================================================

# Primary Installation:
#   pip install -r requirements-dev.txt

# Development Setup (with runtime dependencies):
#   pip install -r requirements.txt -r requirements-dev.txt

# Full Development Installation (using pyproject.toml):
#   pip install -e .[dev]

# Pre-commit Hook Setup (after installation):
#   pre-commit install

# Virtual Environment Recommended:
#   python -m venv plume-nav-env
#   source plume-nav-env/bin/activate  # Linux/macOS
#   pip install -r requirements-dev.txt

# Verification Steps:
#   black --version     # Verify code formatter installation
#   flake8 --version    # Verify linter installation  
#   mypy --version      # Verify type checker installation
#   pre-commit --version # Verify git hook manager installation

# =============================================================================
# COMPATIBILITY INFORMATION
# =============================================================================

# Python Version Support: 3.10, 3.11, 3.12, 3.13
# Platform Support: Linux (full), macOS (full), Windows (good compatibility)
# Installation Time: ~3-8 minutes depending on internet speed and platform
# Disk Space Required: ~150MB total for all development tools and dependencies
# Memory Footprint: ~20MB additional runtime memory for IDE integration

# Scientific Computing Integration:
# - All tools configured for numpy array handling and mathematical code patterns
# - Matplotlib import handling and visualization code pattern support
# - Gymnasium environment implementation and API compliance requirements
# - Reinforcement learning code patterns and algorithm development support