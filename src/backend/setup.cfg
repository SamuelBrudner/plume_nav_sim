# setup.cfg - Legacy Tool Configuration and Development Workflow Support
# 
# This file provides comprehensive tool configurations and legacy compatibility support 
# for the plume_nav_sim package, supplementing the primary pyproject.toml configuration
# with INI-format configurations for tools requiring setup.cfg format, additional 
# metadata specifications, and development workflow enhancements supporting scientific 
# Python ecosystem standards and comprehensive code quality validation workflows.
#
# Configuration Version: 1.0
# Target Coverage: >95% code coverage with scientific Python standards
# Tool Integration: flake8>=7.0.0, bandit>=1.7.0, coverage>=7.0.0, mypy>=1.8.0

[metadata]
# Package metadata section providing supplementary information that complements 
# pyproject.toml configuration for legacy compatibility and additional tool support
name = plume-nav-sim
version = 0.0.1
author = plume_nav_sim Development Team
author_email = plume-nav-sim@example.com
description = Proof-of-life Gymnasium-compatible reinforcement learning environment for plume navigation research
long_description = file: README.md
long_description_content_type = text/markdown
license = MIT
url = https://github.com/plume-nav-sim/plume_nav_sim
project_urls = 
    Documentation = https://plume-nav-sim.readthedocs.io
    Source = https://github.com/plume-nav-sim/plume_nav_sim
    Tracker = https://github.com/plume-nav-sim/plume_nav_sim/issues
classifiers =
    Development Status :: 3 - Alpha
    Intended Audience :: Science/Research
    Topic :: Scientific/Engineering :: Artificial Intelligence
    License :: OSI Approved :: MIT License
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: 3.11
    Programming Language :: Python :: 3.12
    Programming Language :: Python :: 3.13
    Framework :: Gymnasium

[options]
# Package installation and dependency options supplementing pyproject.toml 
# configuration with legacy compatibility and additional specifications
zip_safe = False
include_package_data = True
python_requires = >=3.10
packages = find:
package_dir = 
    = src/backend
install_requires =
    gymnasium>=0.29.0
    numpy>=2.1.0
    matplotlib>=3.9.0

[options.packages.find]
# Package discovery configuration specifying source directory and exclusion 
# patterns for proper package building and distribution
where = src/backend
exclude =
    tests*
    benchmarks*
    examples*
    docs*

[options.extras_require]
# Optional dependency groups for different use cases and development workflows 
# supplementing pyproject.toml optional dependencies
dev = 
    pytest>=8.0.0
    pytest-cov>=4.0.0
    black>=24.0.0
    flake8>=7.0.0
    mypy>=1.8.0
    isort>=5.12.0
test = 
    pytest>=8.0.0
    pytest-cov>=4.0.0
    pytest-xdist>=3.0.0
    pytest-benchmark>=4.0.0
security = 
    bandit>=1.7.0
    safety>=2.0.0

[flake8]
# Flake8 linting configuration providing comprehensive code quality validation 
# with scientific Python standards and Black formatter compatibility
# Maximum line length consistent with Black formatter for unified code style
max-line-length = 88
# Ignore specific errors that conflict with Black formatting or are handled by other tools
# E203: whitespace before ':' (conflicts with Black)
# W503: line break before binary operator (conflicts with Black)
# E501: line too long (handled by Black)
# F401: module imported but unused (handled contextually)
extend-ignore = E203,W503,E501,F401
# Directories to exclude from linting including version control, cache, and build artifacts
exclude = 
    .git,
    __pycache__,
    build,
    dist,
    .tox,
    .pytest_cache,
    *.egg-info
# Error and warning codes to check for comprehensive code quality validation
select = E,W,F,C
# Maximum cyclomatic complexity threshold for maintainable code structure
max-complexity = 10
# File-specific ignore patterns for appropriate flexibility in different code contexts
per-file-ignores = 
    __init__.py:F401
    tests/*:F401,F811
    examples/*:F401,E402
    conftest.py:F401
# Show total number of errors for quality metrics and tracking
count = True
# Show error statistics for code quality analysis and improvement targeting
statistics = True

[bandit]
# Bandit security linting configuration for vulnerability detection and secure 
# coding practices enforcement in the plume_nav_sim codebase
# Directories to exclude from security scanning including test code and build artifacts
exclude_dirs = tests,build,dist,.tox,.pytest_cache
# Security checks to skip that are not applicable to reinforcement learning research context
# B101: Skip assert_used test - assertions are appropriate in RL research contexts
# B601: Skip shell_injection_possible - not applicable to mathematical computing environment
skips = B101,B601
# Minimum severity level for security issue reporting balancing thoroughness with practicality
severity = medium
# Minimum confidence level for security issue reporting to reduce false positives
confidence = medium

[coverage:run]
# Code coverage configuration for pytest-cov integration providing detailed 
# coverage analysis and quality metrics validation
# Source package for coverage analysis focusing on main implementation code
source = plume_nav_sim
# Files and patterns to exclude from coverage analysis including test code and utility scripts
omit = 
    */tests/*
    */test_*
    setup.py
    conftest.py
    */examples/*
    */benchmarks/*
# Enable branch coverage analysis for comprehensive test validation of conditional logic
branch = True
# Enable parallel coverage collection for multi-process test execution support
parallel = True
# Concurrency support for comprehensive coverage in multi-threaded and multi-process environments
concurrency = thread,multiprocessing

[coverage:report]
# Coverage reporting configuration providing detailed analysis output and quality 
# metrics for development feedback and CI/CD integration
# Coverage percentage decimal precision for detailed quality metrics
precision = 2
# Show line numbers of missing coverage for targeted improvement efforts
show_missing = True
# Include fully covered files in reports for comprehensive visibility
skip_covered = False
# Lines to exclude from coverage analysis including debug code and error handling
exclude_lines = 
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
# Minimum coverage percentage required for quality gates and CI/CD success
fail_under = 95

[coverage:html]
# HTML coverage report configuration for detailed visual coverage analysis 
# and development workflow integration
# Output directory for HTML coverage reports enabling detailed line-by-line analysis
directory = htmlcov
# Include covered files in HTML report for complete coverage visualization
skip_covered = False

[coverage:xml]
# XML coverage report configuration for CI/CD integration and automated 
# coverage analysis systems
# XML output file for CI/CD systems and coverage analysis tools integration
output = coverage.xml

[egg_info]
# Egg info configuration for package building and distribution metadata management
# Build tag for development versions - empty for release builds
tag_build = 
# Date tagging disabled for consistent release builds
tag_date = 0