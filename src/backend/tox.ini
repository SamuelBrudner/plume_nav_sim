# =============================================================================
# plume_nav_sim Testing Automation Configuration (tox.ini)
# =============================================================================
# 
# Comprehensive tox testing automation configuration file providing multi-environment
# testing, code quality validation, and development workflow automation for the
# plume_nav_sim reinforcement learning package. Supports Python 3.10-3.13
# compatibility testing, comprehensive test categorization, code quality enforcement,
# documentation building, coverage reporting, and CI/CD pipeline integration.
#
# Compatible with tox >=4.0.0 and follows modern Python packaging standards
# with PEP 517/518 build system integration and scientific Python ecosystem
# best practices for reinforcement learning development workflows.
#
# Version: 1.0.0
# Python Support: 3.10, 3.11, 3.12, 3.13
# Platform Support: Linux (full), macOS (full), Windows (community)

[tox]
# Minimum tox version ensuring compatibility with modern Python packaging,
# improved dependency resolution, and enhanced multi-environment testing capabilities
minversion = 4.0

# Comprehensive environment list supporting Python 3.10-3.13 compatibility testing,
# specialized test categories, code quality validation, documentation building,
# and cleanup operations for complete development workflow automation
envlist = 
    # Python version compatibility testing environments
    py310,py311,py312,py313,
    # Specialized test category environments  
    unit,integration,performance,reproducibility,edge-case,
    # Code quality and validation environments
    lint,type,format,
    # Documentation and reporting environments
    docs,coverage,
    # Utility environments
    clean

# Enable isolated build using PEP 517/518 standards with hatchling backend
# for consistent package building across environments without legacy setup.py
isolated_build = true

# Skip unavailable Python interpreters allowing flexible testing on systems
# with partial Python version availability for enhanced CI/CD compatibility
skip_missing_interpreters = true

# Display parallel execution output for real-time monitoring and debugging
# during concurrent environment testing with enhanced visibility
parallel_show_output = true

# Additional tox plugins for enhanced functionality including conda environment
# support and GitHub Actions integration for comprehensive CI/CD workflows
requires = 
    tox-conda
    tox-gh-actions

# =============================================================================
# BASE TEST ENVIRONMENT CONFIGURATION
# =============================================================================

[testenv]
# Base dependencies including runtime requirements and comprehensive testing
# utilities for environment functionality validation across all Python versions
deps = 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-test.txt

# Default test execution command with verbose output, concise traceback format,
# and strict marker enforcement for comprehensive test validation and debugging
commands = 
    pytest {posargs:tests/} -v --tb=short --strict-markers

# Environment variables setting Python path for source discovery and coverage
# file isolation for accurate multi-environment coverage measurement
setenv = 
    PYTHONPATH = {toxinidir}/src
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
    # Matplotlib backend configuration for headless testing environments
    MATPLOTLIB_BACKEND = Agg
    # Testing mode environment variable for specialized test configurations
    PLUME_NAV_TEST_MODE = true
    # Disable JIT compilation for consistent testing performance
    NUMBA_DISABLE_JIT = 1

# Pass-through environment variables for CI/CD integration, GitHub Actions support,
# and display system compatibility for rendering tests and external integrations
passenv = 
    CI
    GITHUB_*
    DISPLAY
    XAUTHORITY
    # Python path and environment configuration
    PYTHONPATH
    PYTHON*
    # Testing and coverage environment variables
    COVERAGE_*
    TOX_*

# Platform restriction to Linux and macOS with official gymnasium support,
# excluding Windows which has limited community support for gymnasium framework
platform = linux|darwin

# Allowed external commands for test environment setup, cleanup operations,
# and directory management during test execution with security considerations
allowlist_externals = 
    echo
    rm
    mkdir
    find
    cat
    ls

# =============================================================================
# PYTHON VERSION COMPATIBILITY ENVIRONMENTS
# =============================================================================

[testenv:py310]
# Python 3.10 environment - minimum supported version with full feature compatibility
# and comprehensive testing for baseline functionality validation
basepython = python3.10
description = Run tests with Python 3.10 (minimum supported version)

[testenv:py311]
# Python 3.11 environment - recommended version with enhanced performance
# and stability for optimal development and testing experience
basepython = python3.11
description = Run tests with Python 3.11 (recommended version)

[testenv:py312]
# Python 3.12 environment - latest stable with cutting-edge features
# and modern Python capabilities for future-ready development
basepython = python3.12
description = Run tests with Python 3.12 (latest stable)

[testenv:py313]
# Python 3.13 environment - future-ready with continuous updates
# and experimental features for forward compatibility validation
basepython = python3.13
description = Run tests with Python 3.13 (future-ready)

# =============================================================================
# SPECIALIZED TEST CATEGORY ENVIRONMENTS
# =============================================================================

[testenv:unit]
# Specialized environment for unit testing with fast execution configuration,
# minimal dependencies, and focused component validation targeting >95% code coverage
deps = 
    {[testenv]deps}
    pytest-timeout
    pytest-mock

commands = 
    pytest tests/ -m unit -v \
        --cov=plume_nav_sim \
        --cov-report=term-missing \
        --cov-report=xml:{toxworkdir}/coverage-unit.xml \
        --cov-fail-under=95 \
        --timeout=60 \
        {posargs}

setenv = 
    {[testenv]setenv}
    PYTEST_TIMEOUT = 60
    UNIT_TEST_MODE = true

description = Run unit tests with comprehensive coverage reporting and component isolation validation

[testenv:integration]
# Specialized environment for integration testing with cross-component validation,
# realistic configurations, and system-level behavior verification
deps = 
    {[testenv]deps}
    psutil>=5.9.0

commands = 
    pytest tests/ -m integration -v \
        --cov=plume_nav_sim \
        --cov-report=term-missing \
        --cov-report=xml:{toxworkdir}/coverage-integration.xml \
        --timeout=120 \
        {posargs}

setenv = 
    {[testenv]setenv}
    PYTEST_TIMEOUT = 120
    INTEGRATION_TEST_MODE = true

description = Run integration tests with cross-component validation and system behavior verification

[testenv:performance]
# Specialized environment for performance testing with benchmark validation,
# timing analysis, and resource monitoring targeting <1ms step latency
deps = 
    {[testenv]deps}
    pytest-benchmark>=4.0.0
    memory-profiler>=0.61.0
    psutil>=5.9.0

commands = 
    pytest tests/ -m performance -v \
        --benchmark-only \
        --benchmark-sort=mean \
        --benchmark-disable-gc \
        --benchmark-json={toxworkdir}/benchmark-results.json \
        --timeout=300 \
        {posargs}

setenv = 
    {[testenv]setenv}
    PYTEST_TIMEOUT = 300
    PERFORMANCE_TEST_MODE = true
    BENCHMARK_DISABLE_GC = true

description = Run performance tests with comprehensive benchmarking and resource monitoring validation

[testenv:reproducibility]
# Specialized environment for reproducibility testing with fixed seeding,
# deterministic validation, and cross-session consistency verification
deps = 
    {[testenv]deps}

commands = 
    pytest tests/ -m reproducibility -v \
        --strict-markers \
        --timeout=180 \
        {posargs}

setenv = 
    {[testenv]setenv}
    PYTEST_TIMEOUT = 180
    REPRODUCIBILITY_TEST_MODE = true
    PYTHONHASHSEED = 42

description = Run reproducibility tests with deterministic seeding and cross-session consistency validation

[testenv:edge-case]
# Specialized environment for edge case testing with boundary conditions,
# extreme parameters, and robustness validation under stress conditions
deps = 
    {[testenv]deps}
    pytest-timeout
    psutil>=5.9.0

commands = 
    pytest tests/ -m edge_case -v \
        --timeout=240 \
        --maxfail=3 \
        {posargs}

setenv = 
    {[testenv]setenv}
    PYTEST_TIMEOUT = 240
    EDGE_CASE_TEST_MODE = true

description = Run edge case tests with boundary conditions and extreme parameter validation

# =============================================================================
# CODE QUALITY AND VALIDATION ENVIRONMENTS
# =============================================================================

[testenv:lint]
# Code linting environment using flake8 for comprehensive code quality analysis
# including style guide compliance, error detection, and complexity analysis
deps = 
    flake8>=7.0.0
    flake8-docstrings>=1.7.0
    flake8-import-order>=0.18.2
    flake8-bugbear>=23.9.16

commands = 
    flake8 src/plume_nav_sim/ tests/ examples/ \
        --count \
        --select=E9,F63,F7,F82 \
        --show-source \
        --statistics \
        --output-file={toxworkdir}/flake8-report.txt

skip_install = true
description = Run flake8 linting with comprehensive code quality analysis and style guide validation

[testenv:type]
# Type checking environment using mypy for static type analysis,
# type safety validation, and comprehensive type annotation verification
deps = 
    mypy>=1.8.0
    types-requests>=2.31.0
    types-setuptools>=68.2.0
    numpy>=2.1.0

commands = 
    mypy src/plume_nav_sim/ \
        --strict \
        --show-error-codes \
        --show-column-numbers \
        --html-report {toxworkdir}/mypy-html \
        --txt-report {toxworkdir}/mypy-txt

skip_install = true
description = Run mypy type checking with strict validation and comprehensive type safety analysis

[testenv:format]
# Code formatting environment using black and isort for consistent code style
# enforcement and automated formatting validation across Python versions
deps = 
    black>=24.0.0
    isort>=5.13.0

commands = 
    black --check --diff src/plume_nav_sim/ tests/ examples/
    isort --check-only --diff src/plume_nav_sim/ tests/ examples/

skip_install = true
description = Validate code formatting with black and import organization with isort

# =============================================================================
# DOCUMENTATION AND REPORTING ENVIRONMENTS
# =============================================================================

[testenv:docs]
# Documentation building environment using sphinx for comprehensive API
# documentation generation, user guides, and developer documentation
deps = 
    sphinx>=7.0.0
    sphinx-rtd-theme>=2.0.0
    sphinxcontrib-napoleon>=0.7
    {[testenv]deps}

commands = 
    sphinx-build -W -b html docs/ docs/_build/html
    sphinx-build -W -b doctest docs/ docs/_build/doctest

changedir = {toxinidir}
description = Build comprehensive documentation with sphinx including API reference and user guides

[testenv:coverage]
# Coverage analysis environment for comprehensive code coverage measurement,
# reporting, and validation across all test categories
deps = 
    {[testenv]deps}
    coverage[toml]>=7.0.0

commands = 
    coverage erase
    coverage run --source=plume_nav_sim -m pytest tests/
    coverage report --show-missing --fail-under=90
    coverage html --directory={toxworkdir}/htmlcov
    coverage xml --output={toxworkdir}/coverage.xml

depends = unit,integration
description = Generate comprehensive coverage reports with multi-format output and threshold validation

# =============================================================================
# UTILITY AND MAINTENANCE ENVIRONMENTS
# =============================================================================

[testenv:clean]
# Cleanup environment for removing generated files, cache directories,
# and build artifacts with comprehensive project cleanup
deps = 

commands = 
    rm -rf build/
    rm -rf dist/
    rm -rf *.egg-info/
    rm -rf .coverage*
    rm -rf htmlcov/
    rm -rf docs/_build/
    rm -rf {toxworkdir}/
    find . -type d -name __pycache__ -exec rm -rf {{}} +
    find . -type f -name '*.pyc' -delete
    find . -type f -name '*.pyo' -delete
    find . -type d -name '*.egg-info' -exec rm -rf {{}} +

skip_install = true
allowlist_externals = 
    rm
    find

description = Clean up build artifacts, cache files, and generated documentation

# =============================================================================
# CI/CD INTEGRATION CONFIGURATION
# =============================================================================

[gh-actions]
# GitHub Actions environment mapping for automated CI/CD pipeline execution
# with Python version matrix and parallel test execution optimization
python = 
    3.10: py310, lint, type, format
    3.11: py311, unit, integration, docs
    3.12: py312, performance, coverage
    3.13: py313

[gh-actions:env]
# GitHub Actions environment variable mapping for specialized test execution
# and CI/CD pipeline optimization with context-aware environment selection
PLATFORM = 
    ubuntu-latest: linux
    macos-latest: darwin

# =============================================================================
# PERFORMANCE AND RESOURCE OPTIMIZATION
# =============================================================================

[testenv:benchmark]
# Specialized benchmark environment for comprehensive performance analysis
# and regression testing with detailed timing and resource monitoring
deps = 
    {[testenv]deps}
    pytest-benchmark>=4.0.0
    memory-profiler>=0.61.0

commands = 
    pytest tests/ -m benchmark \
        --benchmark-only \
        --benchmark-autosave \
        --benchmark-compare-fail=mean:5% \
        --benchmark-histogram={toxworkdir}/histogram

setenv = 
    {[testenv]setenv}
    BENCHMARK_AUTOSAVE = true

description = Run comprehensive benchmark tests with performance regression detection

[testenv:profile]
# Performance profiling environment for detailed execution analysis
# and optimization identification with comprehensive profiling tools
deps = 
    {[testenv]deps}
    memory-profiler>=0.61.0
    line_profiler>=4.1.0

commands = 
    python -m memory_profiler examples/quickstart_random_agent.py
    pytest tests/ -m performance --profile

description = Run performance profiling analysis with memory and execution profiling

# =============================================================================
# DEVELOPMENT WORKFLOW ENVIRONMENTS
# =============================================================================

[testenv:dev]
# Development environment for rapid iteration with minimal test execution
# and immediate feedback for active development workflows
deps = 
    {[testenv]deps}

commands = 
    pytest tests/ -x --ff -q {posargs}

description = Quick development testing with fast feedback and immediate failure reporting

[testenv:debug]
# Debug environment with enhanced output and detailed error reporting
# for comprehensive debugging and development troubleshooting
deps = 
    {[testenv]deps}

commands = 
    pytest tests/ -vvv --tb=long --capture=no --pdb-trace {posargs}

description = Debug testing environment with verbose output and PDB integration

# =============================================================================
# CONFIGURATION VALIDATION AND TESTING
# =============================================================================

[testenv:validate]
# Validation environment for configuration testing and environment verification
# ensuring proper setup and dependency resolution across all environments
deps = 
    {[testenv]deps}

commands = 
    python -c "import plume_nav_sim; print('Package import successful')"
    python -c "import gymnasium; print('Gymnasium available:', gymnasium.__version__)"
    python -c "import numpy; print('NumPy available:', numpy.__version__)"
    python -c "import matplotlib; print('Matplotlib available:', matplotlib.__version__)"
    pytest --collect-only tests/

description = Validate environment configuration and dependency availability

# =============================================================================
# CONFIGURATION NOTES AND USAGE EXAMPLES
# =============================================================================

# Primary Development Commands:
#   tox -e py311                    # Test with recommended Python version
#   tox -e unit                     # Run unit tests with coverage
#   tox -e lint,type,format        # Run all code quality checks
#   tox -e docs                     # Build documentation
#   tox -e clean                    # Clean build artifacts
#
# CI/CD Pipeline Commands:
#   tox -e py310,py311,py312,py313  # Full Python compatibility testing
#   tox -e unit,integration,performance # Comprehensive test suite
#   tox -e coverage                 # Generate coverage reports
#
# Quality Assurance Commands:
#   tox -e lint                     # Code quality analysis
#   tox -e type                     # Static type checking
#   tox -e format                   # Code formatting validation
#
# Performance Analysis Commands:
#   tox -e performance              # Performance benchmarking
#   tox -e benchmark               # Detailed benchmark analysis
#   tox -e profile                 # Performance profiling
#
# Development Workflow Commands:
#   tox -e dev                     # Quick development testing
#   tox -e debug                   # Debug with enhanced output
#   tox -e validate               # Validate environment setup
#
# Parallel Execution:
#   tox -p auto                    # Parallel execution (all compatible envs)
#   tox -p 4                       # Parallel with specific worker count
#
# Environment Listing:
#   tox -l                         # List all available environments
#   tox -a                         # List all environments with descriptions